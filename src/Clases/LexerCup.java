/* The following code was generated by JFlex 1.4.3 on 14/05/22 17:27 */

package Clases;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14/05/22 17:27 from the specification file
 * <tt>C:/Users/Jefferson/Documents/NetBeansProjects/PROYECTOFINAL_COMPILADOR/src/Clases/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  3,  0,  0,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    19,  0,  0,  0,  0,  0,  0, 35,  0,  0,  0,  0,  1, 28, 37,  2, 
     0, 29,  0,  0,  0,  0,  0,  0,  0, 30, 37, 37,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0, 34,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  5,  4, 12, 10,  7, 16, 21, 18, 11, 27, 15, 13, 22, 17, 14, 
    25, 32,  8, 23,  6, 20, 26, 24, 33,  9, 31,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0, 36,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\5\1\1\4\7\1"+
    "\1\2\11\1\1\5\1\6\1\2\1\0\1\7\1\0"+
    "\1\10\5\0\1\10\6\0\1\3\3\0\1\11\1\10"+
    "\6\0\1\10\26\0\1\12\1\0\1\4\2\0\1\13"+
    "\1\14\1\0\1\15\17\0\1\16\2\0\1\10\20\0"+
    "\1\17\1\0\1\4\7\0\1\14\5\0\1\12\3\0"+
    "\1\20\11\0\1\21\6\0\1\22\24\0\1\23\2\0"+
    "\1\12\1\22\7\0\1\24\10\0\1\25\1\0\1\12"+
    "\2\0\1\26\11\0\1\10\6\0\1\25\3\0\1\27"+
    "\3\0\1\24\12\0\1\21\1\30\7\0\1\31\15\0"+
    "\1\32\6\0\1\21\4\0\1\33\4\0\1\32\33\0"+
    "\1\34\1\4\1\22\10\0\1\26\4\0\1\24\1\0"+
    "\1\12\10\0\1\20\2\0\1\23\12\0\2\22\12\0"+
    "\1\24\50\0\1\32\1\0\1\14\4\0\1\22\3\0"+
    "\1\23\10\0\1\10\27\0\1\17\1\16\2\0\1\31"+
    "\4\0\1\20\5\0\1\35\26\0\1\22\1\0\1\22"+
    "\14\0\1\26\5\0\1\22\13\0\1\32\7\0\1\22"+
    "\4\0\1\4\12\0\1\21\1\0\1\36\12\0\1\35"+
    "\1\0\1\35\26\0\1\14\1\22\30\0\1\12\6\0"+
    "\1\10\25\0\1\10\11\0\1\14\13\0\1\37\1\30"+
    "\5\0\1\26\1\37\30\0\1\22\24\0\1\24\1\0"+
    "\1\40\2\0\1\41\2\0\1\14\7\0\1\10\16\0"+
    "\1\25\17\0\1\12\11\0\1\23\2\0\1\24\2\0"+
    "\1\22\11\0\1\42\4\0\1\14\5\0\1\43\4\0"+
    "\1\32\7\0\1\32\2\0\1\14\2\0\1\22\1\0"+
    "\1\10\1\32\3\0\1\42\4\0\1\26\3\0\1\14"+
    "\1\26\53\0\1\26\2\0\1\23\6\0\1\44\1\0"+
    "\1\45\2\0\1\35\3\0\1\22\15\0\1\31\6\0"+
    "\1\46\4\0\2\12\17\0\1\10\1\31\2\0\1\14"+
    "\1\0\1\31\6\0\1\47\5\0\1\14\1\37\2\0"+
    "\1\37\6\0\1\32\25\0\1\50\1\0\1\51\25\0"+
    "\1\22\1\24\2\0\1\24\7\0\1\23\32\0\1\17"+
    "\21\0\1\22\1\51\1\0\1\52\15\0\1\26\3\0"+
    "\1\45\6\0\1\22\47\0\1\32\4\0\1\10\10\0"+
    "\1\34\17\0\1\24\13\0\1\22\31\0\1\47\15\0"+
    "\1\53\17\0\1\54\2\0\1\55\1\56\3\0\1\56"+
    "\4\0\1\57\1\60\24\0\1\17\7\0\1\53\6\0"+
    "\1\61\5\0\1\51\44\0\1\62\102\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[1402];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\276\0\344\0\u010a"+
    "\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214\0\u023a"+
    "\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e\0\u0344\0\u036a"+
    "\0\u0390\0\u03b6\0\u03dc\0\u0402\0\u0428\0\46\0\46\0\u044e"+
    "\0\u0474\0\u049a\0\u04c0\0\u04e6\0\u050c\0\u0532\0\u0558\0\u057e"+
    "\0\u05a4\0\u05ca\0\u05f0\0\u0616\0\u063c\0\u0662\0\u0688\0\u06ae"+
    "\0\u06d4\0\u06fa\0\u0720\0\u0746\0\u076c\0\u0792\0\u07b8\0\u07de"+
    "\0\u0804\0\u082a\0\u0850\0\u0876\0\u089c\0\u08c2\0\u08e8\0\u090e"+
    "\0\u0934\0\u095a\0\u0980\0\u09a6\0\u09cc\0\u09f2\0\u0a18\0\u0a3e"+
    "\0\u0a64\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22\0\u0b48\0\u0b6e"+
    "\0\u0b94\0\u0bba\0\u0be0\0\u0c06\0\u0c2c\0\u0c52\0\u0c78\0\u0c9e"+
    "\0\46\0\u0cc4\0\u0cea\0\46\0\u0d10\0\u0d36\0\u0d5c\0\u0d82"+
    "\0\u0da8\0\u0dce\0\u0df4\0\u0e1a\0\u0e40\0\u0e66\0\u0e8c\0\u0eb2"+
    "\0\u0ed8\0\u0efe\0\u0f24\0\u0f4a\0\u0f70\0\u0f96\0\u0fbc\0\u0fe2"+
    "\0\u1008\0\u102e\0\u1054\0\u107a\0\u10a0\0\u10c6\0\u10ec\0\u1112"+
    "\0\u1138\0\u115e\0\u1184\0\u11aa\0\u11d0\0\u11f6\0\u121c\0\u1242"+
    "\0\u1268\0\u128e\0\u12b4\0\u12da\0\u1300\0\u1326\0\u134c\0\u1372"+
    "\0\u1398\0\u13be\0\u13e4\0\u140a\0\u1430\0\u1456\0\u147c\0\u14a2"+
    "\0\u14c8\0\u14ee\0\u1514\0\u153a\0\u1560\0\u1586\0\u15ac\0\u15d2"+
    "\0\u15f8\0\u161e\0\u1644\0\u166a\0\u1690\0\u16b6\0\u16dc\0\u1702"+
    "\0\u1728\0\u174e\0\u1774\0\u179a\0\u17c0\0\u17e6\0\u180c\0\u1832"+
    "\0\u1858\0\u187e\0\u18a4\0\u18ca\0\u18f0\0\u1916\0\u193c\0\u1962"+
    "\0\u1988\0\u19ae\0\u19d4\0\u19fa\0\u1a20\0\u1a46\0\u1a6c\0\u1a92"+
    "\0\u1ab8\0\u1ade\0\u1b04\0\u1b2a\0\u1b50\0\46\0\u1b76\0\u1b9c"+
    "\0\u1bc2\0\u1be8\0\u1c0e\0\u1c34\0\u1c5a\0\u1c80\0\u1ca6\0\u1ccc"+
    "\0\u1cf2\0\u1d18\0\u1d3e\0\u1d64\0\u1d8a\0\u1db0\0\u1dd6\0\u1dfc"+
    "\0\u1e22\0\u1e48\0\u1e6e\0\46\0\u1e94\0\u1eba\0\u1ee0\0\u1f06"+
    "\0\u1f2c\0\u1f52\0\u1f78\0\u1f9e\0\u1fc4\0\u1fea\0\u2010\0\u2036"+
    "\0\u205c\0\u2082\0\u20a8\0\u20ce\0\46\0\u20f4\0\u211a\0\u2140"+
    "\0\46\0\u2166\0\u218c\0\u21b2\0\u21d8\0\u21fe\0\u2224\0\u224a"+
    "\0\u2270\0\u2296\0\u22bc\0\u22e2\0\u2308\0\u232e\0\u2354\0\u237a"+
    "\0\46\0\u23a0\0\u23c6\0\u23ec\0\u2412\0\u2438\0\u245e\0\u2484"+
    "\0\46\0\u24aa\0\u24d0\0\u24f6\0\u251c\0\u2542\0\u2568\0\u258e"+
    "\0\u25b4\0\u25da\0\u2600\0\u2626\0\u264c\0\u2672\0\u2698\0\u26be"+
    "\0\u26e4\0\u270a\0\u2730\0\u2756\0\u277c\0\u27a2\0\u27c8\0\u27ee"+
    "\0\u2814\0\u283a\0\u2860\0\u2886\0\u28ac\0\u28d2\0\u28f8\0\u291e"+
    "\0\u2944\0\u296a\0\u2990\0\u29b6\0\u29dc\0\u2a02\0\u2a28\0\u2a4e"+
    "\0\u2a74\0\u2a9a\0\u2ac0\0\u2ae6\0\u2b0c\0\u2b32\0\u2b58\0\u2b7e"+
    "\0\u2ba4\0\u2bca\0\u2bf0\0\u2c16\0\u2c3c\0\u2c62\0\u2c88\0\u2cae"+
    "\0\u2cd4\0\u2cfa\0\u2d20\0\u2d46\0\u2d6c\0\u2d92\0\u2db8\0\u2dde"+
    "\0\u2e04\0\u2e2a\0\u2e50\0\u2e76\0\u2e9c\0\u2ec2\0\u21d8\0\u2ee8"+
    "\0\u2f0e\0\u2f34\0\u2f5a\0\u2f80\0\u2fa6\0\u2fcc\0\u2ff2\0\u3018"+
    "\0\u303e\0\u3064\0\u308a\0\u30b0\0\u30d6\0\u30fc\0\46\0\u3122"+
    "\0\u3148\0\46\0\u316e\0\u3194\0\u31ba\0\u31e0\0\u3206\0\u322c"+
    "\0\u3252\0\u3278\0\u329e\0\u32c4\0\u32ea\0\u3310\0\u3336\0\u335c"+
    "\0\u3382\0\u33a8\0\u33ce\0\u33f4\0\u341a\0\u3440\0\u3466\0\u348c"+
    "\0\u0bba\0\u34b2\0\u34d8\0\u34fe\0\u3524\0\u354a\0\u3570\0\u3596"+
    "\0\u35bc\0\u35e2\0\u3608\0\u362e\0\u3654\0\u367a\0\u36a0\0\u36c6"+
    "\0\u36ec\0\u3712\0\u3738\0\u375e\0\u3784\0\u37aa\0\u37d0\0\u37f6"+
    "\0\u381c\0\u3842\0\u3868\0\u388e\0\u38b4\0\u38da\0\u3900\0\u3926"+
    "\0\u394c\0\u3972\0\u3998\0\u39be\0\u39e4\0\u3a0a\0\u3a30\0\u3a56"+
    "\0\u3a7c\0\u3aa2\0\u3ac8\0\u3aee\0\u3b14\0\u3b3a\0\u3b60\0\u3b86"+
    "\0\u3bac\0\u3bd2\0\u3bf8\0\u3c1e\0\u3c44\0\u3c6a\0\u3c90\0\u3cb6"+
    "\0\u3cdc\0\u3d02\0\u3d28\0\u3d4e\0\u3d74\0\u3d9a\0\u3dc0\0\u3de6"+
    "\0\u3e0c\0\u3e32\0\u3e58\0\u3e7e\0\u3ea4\0\u3eca\0\u3ef0\0\u3f16"+
    "\0\u3f3c\0\u3f62\0\u3f88\0\u3fae\0\u3fd4\0\u3ffa\0\u4020\0\u4046"+
    "\0\u406c\0\u4092\0\u40b8\0\u40de\0\u4104\0\u412a\0\46\0\u4150"+
    "\0\u4176\0\u419c\0\u41c2\0\u41e8\0\u420e\0\u4234\0\u425a\0\u4280"+
    "\0\u42a6\0\u42cc\0\u42f2\0\u4318\0\u433e\0\u4364\0\u438a\0\u43b0"+
    "\0\u43d6\0\u43fc\0\u4422\0\u4448\0\u446e\0\u4494\0\u44ba\0\u44e0"+
    "\0\u4506\0\u452c\0\u4552\0\u4578\0\u459e\0\u45c4\0\u45ea\0\u4610"+
    "\0\u4636\0\u465c\0\u4682\0\u46a8\0\u46ce\0\u46f4\0\u471a\0\u4740"+
    "\0\u4766\0\u478c\0\u47b2\0\u47d8\0\u47fe\0\u4824\0\u27a2\0\u484a"+
    "\0\u4870\0\u4896\0\u48bc\0\u48e2\0\u4908\0\u492e\0\u4954\0\u497a"+
    "\0\u49a0\0\u49c6\0\u49ec\0\u4a12\0\u4a38\0\u4a5e\0\u4a84\0\u4aaa"+
    "\0\u4ad0\0\u4af6\0\u4b1c\0\u4b42\0\u3e0c\0\u4b68\0\u4b8e\0\u4bb4"+
    "\0\u4bda\0\u4c00\0\u4c26\0\u4c4c\0\u2cae\0\u4c72\0\u4c98\0\u4cbe"+
    "\0\u4ce4\0\46\0\u4d0a\0\u4d30\0\u4d56\0\u4d7c\0\u4da2\0\u4dc8"+
    "\0\u4dee\0\u4e14\0\u4e3a\0\u4e60\0\46\0\u4e86\0\u4eac\0\u4ed2"+
    "\0\u4ef8\0\u4f1e\0\u4f44\0\u4eac\0\u4f6a\0\u4f90\0\u4fb6\0\u4fdc"+
    "\0\u5002\0\46\0\u5028\0\u504e\0\u5074\0\u509a\0\u50c0\0\u50e6"+
    "\0\u510c\0\u5132\0\u5158\0\u517e\0\u51a4\0\u51ca\0\u51f0\0\u5216"+
    "\0\u523c\0\u5262\0\u5288\0\u52ae\0\u52d4\0\u52fa\0\u5320\0\u5346"+
    "\0\u536c\0\u5392\0\u53b8\0\u1e22\0\u53de\0\u5404\0\u542a\0\u5450"+
    "\0\u5476\0\u549c\0\u54c2\0\u54e8\0\u550e\0\u5534\0\u555a\0\u2f80"+
    "\0\u5580\0\u55a6\0\u55cc\0\u55f2\0\u5618\0\u563e\0\u5664\0\u568a"+
    "\0\u56b0\0\u56d6\0\u56fc\0\u5722\0\u5748\0\u576e\0\u5794\0\u57ba"+
    "\0\u57e0\0\u425a\0\u5806\0\46\0\u582c\0\u5852\0\u5878\0\u589e"+
    "\0\u58c4\0\u58ea\0\u5910\0\u5936\0\u595c\0\u5982\0\u59a8\0\u59ce"+
    "\0\u59f4\0\u5a1a\0\u5a40\0\u5a66\0\u5a8c\0\u5ab2\0\u5ad8\0\u5afe"+
    "\0\u5b24\0\u5b4a\0\u5b70\0\u5b96\0\u5bbc\0\u5be2\0\u5c08\0\u5c2e"+
    "\0\u5c54\0\u5c7a\0\u5ca0\0\u3c44\0\u5cc6\0\u5cec\0\u5d12\0\u5d38"+
    "\0\u5d5e\0\u5d84\0\u5daa\0\u5dd0\0\u5df6\0\u5e1c\0\u5e42\0\u5e68"+
    "\0\u3926\0\u5e8e\0\u5eb4\0\u2d6c\0\u5eda\0\u5f00\0\u1f9e\0\u5f26"+
    "\0\u5f4c\0\u5f72\0\u5f98\0\u5fbe\0\u5fe4\0\u600a\0\u1ade\0\u6030"+
    "\0\u6056\0\u607c\0\u60a2\0\u60c8\0\u60ee\0\u6114\0\u613a\0\u6160"+
    "\0\u6186\0\u61ac\0\u61d2\0\u61f8\0\u621e\0\u6244\0\u626a\0\u6290"+
    "\0\u21d8\0\u62b6\0\u62dc\0\u6302\0\u6328\0\u634e\0\u6374\0\u639a"+
    "\0\u63c0\0\u63e6\0\u640c\0\u6432\0\u6458\0\u647e\0\u64a4\0\u64ca"+
    "\0\u64f0\0\u6516\0\u653c\0\u6562\0\u6588\0\u65ae\0\u65d4\0\46"+
    "\0\u1e22\0\u65fa\0\46\0\u6620\0\u6646\0\u666c\0\u6692\0\u66b8"+
    "\0\u66de\0\u6704\0\u672a\0\u6750\0\u6776\0\u679c\0\u67c2\0\u67e8"+
    "\0\u680e\0\u6834\0\u685a\0\u6880\0\u68a6\0\u68cc\0\u68f2\0\u6918"+
    "\0\u693e\0\u6964\0\u698a\0\u69b0\0\u69d6\0\u69fc\0\u6a22\0\u6a48"+
    "\0\u6a6e\0\u6a94\0\u6aba\0\u6ae0\0\u6b06\0\u6b2c\0\u6b52\0\u6b78"+
    "\0\u6b9e\0\u6bc4\0\u6bea\0\u6c10\0\46\0\u6c36\0\u6c5c\0\u6c82"+
    "\0\u6ca8\0\u6cce\0\u6cf4\0\u6d1a\0\u6d40\0\u6d66\0\u6d8c\0\u6db2"+
    "\0\u6dd8\0\u6dfe\0\u6e24\0\u6e4a\0\u6dfe\0\u6e70\0\u6e96\0\u6ebc"+
    "\0\u6ee2\0\u6f08\0\u6f2e\0\u6f54\0\u6f7a\0\u6fa0\0\46\0\u6fc6"+
    "\0\u6fec\0\u7012\0\u7038\0\u705e\0\u7084\0\u70aa\0\u70d0\0\u70f6"+
    "\0\u711c\0\46\0\u7142\0\u7168\0\u718e\0\u71b4\0\46\0\u71da"+
    "\0\u7200\0\u7226\0\u724c\0\u7272\0\u7298\0\u72be\0\u72e4\0\u730a"+
    "\0\u7330\0\u7356\0\u737c\0\u73a2\0\u73c8\0\u73ee\0\u6db2\0\u7414"+
    "\0\u743a\0\u7460\0\u7486\0\u74ac\0\u74d2\0\u74f8\0\u751e\0\u7544"+
    "\0\u756a\0\u7590\0\u75b6\0\u75dc\0\46\0\u7602\0\u7628\0\u764e"+
    "\0\u2d92\0\u7674\0\u769a\0\u76c0\0\u76e6\0\u770c\0\u7732\0\u7758"+
    "\0\u777e\0\u77a4\0\u77ca\0\u77f0\0\u7816\0\u783c\0\u7862\0\u7888"+
    "\0\u78ae\0\u78d4\0\u78fa\0\u7920\0\u7946\0\u796c\0\u7992\0\u79b8"+
    "\0\u79de\0\u7a04\0\u7a2a\0\u7a50\0\u7a76\0\u7a9c\0\u7ac2\0\u7ae8"+
    "\0\u7b0e\0\u7b34\0\u7b5a\0\u7b80\0\u7ba6\0\u7bcc\0\u7bf2\0\u7c18"+
    "\0\u7c3e\0\u1ade\0\u7c64\0\u7c8a\0\u7cb0\0\u7cd6\0\u7cfc\0\u7d22"+
    "\0\u7d48\0\u7d6e\0\u7d94\0\46\0\u7dba\0\u7de0\0\u7e06\0\u7e2c"+
    "\0\u7e52\0\u7e78\0\u7e9e\0\u7ec4\0\u4e86\0\u7eea\0\u7f10\0\u7f36"+
    "\0\u7f5c\0\u7f82\0\u7fa8\0\u7fce\0\u7ff4\0\u801a\0\u8040\0\u8066"+
    "\0\u808c\0\u80b2\0\u80d8\0\u80fe\0\u8124\0\u814a\0\u8170\0\u8196"+
    "\0\u81bc\0\46\0\u81e2\0\u8208\0\u822e\0\u8254\0\u827a\0\u82a0"+
    "\0\u82c6\0\u82ec\0\u8312\0\u8338\0\u835e\0\u8384\0\u83aa\0\u83d0"+
    "\0\u83f6\0\u841c\0\u8442\0\u8468\0\u848e\0\u84b4\0\u84da\0\u8500"+
    "\0\u8526\0\u854c\0\u8572\0\u8598\0\u85be\0\u5b4a\0\u85e4\0\u860a"+
    "\0\u8630\0\u8656\0\u867c\0\u86a2\0\46\0\u86c8\0\u86ee\0\u8714"+
    "\0\u873a\0\u8760\0\u8786\0\u87ac\0\u87d2\0\u87f8\0\46\0\u881e"+
    "\0\u8844\0\u886a\0\u8890\0\u88b6\0\u88dc\0\u71b4\0\u8902\0\u8928"+
    "\0\u894e\0\u8974\0\u899a\0\u89c0\0\u89e6\0\u8a0c\0\u8a32\0\u8a58"+
    "\0\u8a7e\0\u8aa4\0\u8aca\0\u8af0\0\u705e\0\u8b16\0\u8b3c\0\u8b62"+
    "\0\u8b88\0\u8bae\0\u8bd4\0\46\0\u8bfa\0\46\0\u8c20\0\u8c46"+
    "\0\u8c6c\0\u8c92\0\u8cb8\0\u8cde\0\u8d04\0\u8d2a\0\u8d50\0\u8d76"+
    "\0\u8d9c\0\u8dc2\0\u8de8\0\u8e0e\0\u8e34\0\u8e5a\0\u8e80\0\u8ea6"+
    "\0\u8ecc\0\u8ef2\0\u8f18\0\u8f3e\0\u8f64\0\u8f8a\0\u8fb0\0\u8fd6"+
    "\0\u8ffc\0\u9022\0\u9048\0\u906e\0\u9094\0\u90ba\0\u90e0\0\u9106"+
    "\0\u912c\0\u9152\0\u9178\0\u919e\0\u91c4\0\u91ea\0\u9210\0\u9236"+
    "\0\u925c\0\u9282\0\u92a8\0\u92ce\0\u92f4\0\u931a\0\u9340\0\u9366"+
    "\0\u938c\0\u93b2\0\u93d8\0\u93fe\0\u9424\0\u944a\0\u9470\0\u9496"+
    "\0\u94bc\0\u94e2\0\u74ac\0\u9508\0\u952e\0\u9554\0\u957a\0\u95a0"+
    "\0\u95c6\0\u95ec\0\u9612\0\u9638\0\u965e\0\u9684\0\u96aa\0\u96d0"+
    "\0\u96f6\0\u971c\0\u9742\0\u9768\0\u978e\0\u97b4\0\u97da\0\46"+
    "\0\u9800\0\u9826\0\u984c\0\u9872\0\u978e\0\u9898\0\u98be\0\u98e4"+
    "\0\u990a\0\u9930\0\u9956\0\u997c\0\u99a2\0\u99c8\0\u99ee\0\u9a14"+
    "\0\u9a3a\0\46\0\u9a60\0\u9a86\0\u9aac\0\u9ad2\0\u9af8\0\u9b1e"+
    "\0\u9b44\0\u9b6a\0\u9b90\0\u9bb6\0\u9bdc\0\u9c02\0\u9c28\0\u9c4e"+
    "\0\u9c74\0\u9c9a\0\u9cc0\0\u9ce6\0\u9d0c\0\u9d32\0\u9d58\0\u9d7e"+
    "\0\u9da4\0\u9dca\0\u9df0\0\u9e16\0\u9e3c\0\u9e62\0\u9e88\0\u9eae"+
    "\0\u9ed4\0\u9efa\0\u9f20\0\u9f46\0\u9f6c\0\u9f92\0\u9fb8\0\u9fde"+
    "\0\ua004\0\ua02a\0\ua050\0\ua076\0\ua09c\0\ua0c2\0\ua0e8\0\ua10e"+
    "\0\u881e\0\ua134\0\ua15a\0\ua180\0\ua1a6\0\ua1cc\0\u99c8\0\ua1f2"+
    "\0\u7cb0\0\ua218\0\ua23e\0\ua264\0\ua28a\0\ua2b0\0\46\0\ua2d6"+
    "\0\ua2fc\0\ua322\0\ua348\0\ua36e\0\ua394\0\ua3ba\0\ua3e0\0\ua406"+
    "\0\ua42c\0\ua452\0\ua478\0\ua49e\0\ua4c4\0\ua4ea\0\ua510\0\ua536"+
    "\0\ua55c\0\ua582\0\ua5a8\0\ua5ce\0\ua5f4\0\ua61a\0\ua640\0\ua666"+
    "\0\ua68c\0\ua6b2\0\ua6d8\0\ua6fe\0\ua724\0\ua74a\0\ua770\0\ua796"+
    "\0\ua7bc\0\ua7e2\0\ua808\0\ua82e\0\ua854\0\ua87a\0\ua8a0\0\ua8c6"+
    "\0\ua8ec\0\ua912\0\ua938\0\ua95e\0\ua984\0\ua9aa\0\ua9d0\0\ua9f6"+
    "\0\uaa1c\0\uaa42\0\uaa68\0\ua6d8\0\u2d92\0\uaa8e\0\uaab4\0\uaada"+
    "\0\uab00\0\uab26\0\uab4c\0\uab72\0\uab98\0\uabbe\0\uabe4\0\uac0a"+
    "\0\uac30\0\uac56\0\u8598\0\uac7c\0\uaca2\0\uacc8\0\uacee\0\uad14"+
    "\0\uad3a\0\uad60\0\uad86\0\uadac\0\uadd2\0\uadf8\0\uae1e\0\uae44"+
    "\0\uae6a\0\uae90\0\46\0\uaeb6\0\uaedc\0\46\0\uaf02\0\uaf28"+
    "\0\uaf4e\0\uaf74\0\46\0\uaf9a\0\uafc0\0\uafe6\0\ub00c\0\46"+
    "\0\46\0\ub032\0\ub058\0\ub07e\0\ub0a4\0\ub0ca\0\ub0f0\0\ub116"+
    "\0\ub13c\0\ub162\0\ub188\0\ub1ae\0\ub1d4\0\ub1fa\0\ub220\0\ub246"+
    "\0\ub26c\0\ub292\0\ub2b8\0\ub2de\0\ub304\0\46\0\ub32a\0\ub350"+
    "\0\ub376\0\ub39c\0\ub3c2\0\ub3e8\0\ub40e\0\46\0\ub434\0\ub45a"+
    "\0\ub480\0\ub4a6\0\ub4cc\0\ub4f2\0\46\0\ub518\0\ub53e\0\ub564"+
    "\0\ub58a\0\ub5b0\0\ub5d6\0\ub5fc\0\u8598\0\ub622\0\ub648\0\ub66e"+
    "\0\ub694\0\ub6ba\0\ub6e0\0\ub706\0\ub72c\0\ub752\0\ub778\0\ub79e"+
    "\0\ub7c4\0\ub7ea\0\ub810\0\ub836\0\ub85c\0\ub882\0\ub8a8\0\ub8ce"+
    "\0\ub8f4\0\ub91a\0\ub940\0\ub966\0\ub98c\0\ub9b2\0\ub9d8\0\ub9fe"+
    "\0\uba24\0\uba4a\0\uba70\0\uba96\0\ubabc\0\ubae2\0\ubb08\0\46"+
    "\0\ubb2e\0\ubb54\0\ubb7a\0\ubba0\0\ubbc6\0\ubbec\0\ubc12\0\ubc38"+
    "\0\ubc5e\0\ubc84\0\ubcaa\0\ubcd0\0\ubcf6\0\ubd1c\0\ubd42\0\ubd68"+
    "\0\ubd8e\0\ubdb4\0\ubdda\0\ube00\0\ube26\0\ube4c\0\ube72\0\ube98"+
    "\0\ubebe\0\ubee4\0\ubf0a\0\ubf30\0\ubf56\0\ubf7c\0\ubfa2\0\ubfc8"+
    "\0\ubfee\0\uc014\0\uc03a\0\uc060\0\uc086\0\uc0ac\0\uc0d2\0\uc0f8"+
    "\0\uc11e\0\uc144\0\uc16a\0\uc190\0\uc1b6\0\uc1dc\0\uc202\0\uc228"+
    "\0\uc24e\0\uc274\0\uc29a\0\uc2c0\0\uc2e6\0\uc30c\0\uc332\0\uc358"+
    "\0\uc37e\0\uc3a4\0\uc3ca\0\uc3f0\0\uc416\0\uc43c\0\uc462\0\uc488"+
    "\0\uc4ae\0\uc4d4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1402];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\4\2\1\35\1\2\1\36"+
    "\2\2\1\37\47\0\1\3\1\0\1\3\17\0\1\3"+
    "\24\0\1\40\50\0\1\41\1\0\1\42\1\43\1\44"+
    "\1\0\1\45\1\0\1\46\1\47\5\0\1\50\25\0"+
    "\1\51\1\0\1\52\1\0\1\53\1\0\1\54\1\55"+
    "\1\56\1\57\2\0\1\60\1\61\1\62\1\63\1\0"+
    "\1\64\1\65\1\66\1\67\1\70\21\0\1\71\1\0"+
    "\1\72\1\73\2\0\1\74\2\0\1\75\3\0\1\76"+
    "\5\0\1\77\22\0\1\100\5\0\1\101\1\0\1\102"+
    "\3\0\1\103\2\0\1\104\1\0\1\105\3\0\1\106"+
    "\6\0\1\107\11\0\1\110\1\0\1\111\3\0\1\112"+
    "\2\0\1\113\5\0\1\114\30\0\1\115\6\0\1\116"+
    "\34\0\1\117\1\0\1\120\1\121\1\122\1\0\1\123"+
    "\2\0\1\124\5\0\1\125\27\0\1\126\1\0\1\127"+
    "\4\0\1\130\2\0\1\131\1\132\4\0\1\133\1\134"+
    "\23\0\1\135\1\0\1\136\1\137\1\140\1\0\1\141"+
    "\1\0\1\142\1\143\3\0\1\144\1\0\1\145\26\0"+
    "\1\146\1\0\1\147\3\0\1\150\2\0\1\151\33\0"+
    "\1\152\1\0\1\153\1\0\1\154\3\0\1\155\1\156"+
    "\2\0\1\157\1\160\2\0\1\161\4\0\1\162\1\163"+
    "\22\0\1\164\3\0\1\165\37\0\1\166\1\0\1\167"+
    "\1\170\2\0\1\171\1\0\1\172\1\173\5\0\1\174"+
    "\26\0\1\175\1\0\1\176\3\0\1\177\2\0\1\200"+
    "\34\0\1\201\1\0\1\202\3\0\1\203\2\0\1\204"+
    "\5\0\1\205\22\0\1\3\1\0\1\3\17\0\1\3"+
    "\3\0\1\206\37\0\1\207\3\0\1\210\1\0\1\211"+
    "\1\0\1\212\21\0\1\213\1\0\1\214\1\215\2\0"+
    "\1\216\1\0\1\217\1\220\5\0\1\221\26\0\1\222"+
    "\1\0\1\223\1\0\1\224\1\0\1\225\2\0\1\226"+
    "\5\0\1\227\26\0\1\230\1\231\1\232\3\0\1\233"+
    "\1\234\1\235\1\236\1\237\2\0\1\240\1\0\1\241"+
    "\1\0\1\242\2\0\1\243\21\0\1\244\1\0\1\245"+
    "\1\246\2\0\1\247\2\0\1\250\3\0\1\251\30\0"+
    "\1\252\1\0\1\253\1\254\2\0\1\255\1\0\1\256"+
    "\1\257\3\0\1\260\1\0\1\261\30\0\1\262\3\0"+
    "\1\263\41\0\1\264\6\0\1\265\5\0\1\266\45\0"+
    "\1\267\21\0\3\40\1\0\42\40\6\0\1\270\1\0"+
    "\1\271\1\0\1\272\1\0\1\273\36\0\1\274\1\275"+
    "\1\276\1\0\1\277\1\276\1\300\1\301\1\302\2\0"+
    "\1\303\1\304\1\305\2\0\1\306\1\0\1\307\23\0"+
    "\1\310\1\0\1\311\3\0\1\312\2\0\1\313\5\0"+
    "\1\314\31\0\1\315\12\0\1\316\30\0\1\317\1\0"+
    "\1\320\1\0\1\321\1\0\1\322\4\0\1\323\3\0"+
    "\1\324\25\0\1\325\1\0\1\326\6\0\1\327\5\0"+
    "\1\330\27\0\1\331\1\0\1\332\1\333\4\0\1\334"+
    "\5\0\1\335\27\0\1\336\1\0\1\337\1\321\1\0"+
    "\1\340\1\0\1\341\11\0\1\276\26\0\1\342\5\0"+
    "\1\343\35\0\1\344\1\345\6\0\1\346\3\0\1\347"+
    "\1\350\31\0\1\351\1\352\2\0\1\353\2\0\1\354"+
    "\41\0\1\355\3\0\1\356\7\0\1\357\27\0\1\276"+
    "\43\0\1\355\1\0\1\360\3\0\1\361\41\0\1\362"+
    "\2\0\1\310\1\0\1\363\1\364\7\0\1\365\25\0"+
    "\1\366\1\0\1\367\46\0\1\370\1\371\12\0\1\372"+
    "\1\0\1\373\25\0\1\374\53\0\1\375\2\0\1\376"+
    "\32\0\1\377\2\0\1\u0100\5\0\1\u0101\36\0\1\u0102"+
    "\3\0\1\u0103\2\0\1\u0104\35\0\1\u0105\4\0\1\u0106"+
    "\1\0\1\u0107\1\0\1\355\3\0\1\u0108\27\0\1\u0109"+
    "\10\0\1\u010a\60\0\1\u010b\20\0\1\u010c\10\0\1\u010d"+
    "\35\0\1\u010e\13\0\1\u010f\31\0\1\u0110\3\0\1\355"+
    "\43\0\1\276\1\u0111\10\0\1\u0112\3\0\1\u0113\32\0"+
    "\1\u0114\2\0\1\u0115\1\u0116\5\0\1\u0117\1\0\1\u0118"+
    "\1\0\1\u0119\22\0\1\u011a\1\0\1\u011b\1\u011c\2\0"+
    "\1\u011d\2\0\1\u011e\36\0\1\u011f\6\0\1\u0120\35\0"+
    "\1\321\1\0\1\u0121\16\0\1\u0122\24\0\1\u0123\16\0"+
    "\1\u0124\27\0\1\u0125\44\0\1\u0126\1\u0127\6\0\1\u0128"+
    "\14\0\1\u0129\22\0\1\u012a\41\0\1\u012b\50\0\1\u012c"+
    "\43\0\1\u012d\6\0\1\u012e\14\0\1\u012f\22\0\1\u0130"+
    "\4\0\1\u0131\40\0\1\u0132\3\0\1\324\1\0\1\u0133"+
    "\11\0\1\u0134\1\u0135\1\0\1\u0136\6\0\1\u0137\26\0"+
    "\1\u0138\3\0\1\u0139\25\0\1\320\16\0\1\u013a\33\0"+
    "\1\330\40\0\1\55\1\u0101\6\0\1\u013b\11\0\1\u013c"+
    "\42\0\1\u013d\32\0\1\u013e\7\0\1\u013f\31\0\1\u0140"+
    "\1\u0141\1\u0142\4\0\1\u0143\12\0\1\u0144\23\0\1\u0145"+
    "\1\0\1\u0146\1\0\1\u0147\1\0\1\u0148\2\0\1\u0149"+
    "\5\0\1\u014a\34\0\1\u014b\41\0\1\u014c\1\u014d\1\0"+
    "\1\345\12\0\1\u014e\1\0\1\u014f\25\0\1\u0150\3\0"+
    "\1\u0151\10\0\1\u0152\1\276\2\0\1\u0153\24\0\1\u0154"+
    "\1\u0155\14\0\1\345\43\0\1\u0156\3\0\1\u0157\13\0"+
    "\1\u0158\12\0\1\u0159\52\0\1\u015a\35\0\1\u015b\1\u015c"+
    "\3\0\1\u015d\1\0\1\u015e\3\0\1\u015f\2\0\1\u0160"+
    "\3\0\1\u0161\2\0\1\u0162\20\0\1\u0163\23\0\1\u0164"+
    "\22\0\1\u0165\1\0\1\u0166\4\0\1\u0167\3\0\1\u0168"+
    "\2\0\1\u0169\1\0\1\u016a\1\u016b\26\0\1\u016c\4\0"+
    "\1\u016d\3\0\1\u016e\31\0\1\u016f\1\0\1\u0170\1\0"+
    "\1\u0171\1\0\1\u0172\2\0\1\u0173\43\0\1\u0174\37\0"+
    "\1\u0175\44\0\1\u0176\1\0\1\u0177\3\0\1\312\2\0"+
    "\1\u0178\5\0\1\u0179\36\0\1\156\1\u010d\2\0\1\u017a"+
    "\2\0\1\u017b\1\0\1\u017c\1\u016b\1\u017d\1\u017e\1\u017f"+
    "\20\0\1\u0180\10\0\1\u0181\5\0\1\u0182\27\0\1\321"+
    "\1\0\1\u0183\43\0\1\u0184\15\0\1\u0185\2\0\1\u0186"+
    "\7\0\1\u0112\13\0\1\u0187\1\u0188\20\0\1\u0189\24\0"+
    "\1\u018a\7\0\1\u0119\1\u018b\5\0\1\u018c\1\0\1\u018d"+
    "\2\0\1\211\5\0\1\u018e\13\0\1\u018f\7\0\1\u0190"+
    "\11\0\1\324\1\0\1\u0191\45\0\1\u0192\35\0\1\u0193"+
    "\30\0\1\u0194\4\0\1\u0195\10\0\1\u0196\1\0\1\u0197"+
    "\27\0\1\u0198\50\0\1\324\53\0\1\u0195\2\0\1\u0199"+
    "\31\0\1\u019a\13\0\1\u019b\30\0\1\u019c\1\0\1\u0157"+
    "\43\0\1\u019d\1\u019e\21\0\1\u019f\23\0\1\u01a0\47\0"+
    "\1\u01a1\51\0\1\u01a2\11\0\1\u01a3\24\0\1\u01a4\1\0"+
    "\1\u01a5\2\0\1\u01a6\1\u01a7\1\u01a8\11\0\1\u01a9\25\0"+
    "\1\u01aa\2\0\1\345\2\0\1\u01ab\12\0\1\u015a\24\0"+
    "\1\u01ac\3\0\1\u01ad\2\0\1\u01ae\36\0\1\u01af\1\u01b0"+
    "\7\0\1\u01b1\1\u01b2\3\0\1\u01b3\4\0\1\u01b4\6\0"+
    "\1\355\13\0\1\u01b5\1\0\1\321\4\0\1\u01b6\37\0"+
    "\1\u01b7\4\0\1\u01b8\1\u01b9\5\0\1\u01ba\27\0\1\u01bb"+
    "\6\0\1\u01bc\36\0\1\u01bd\44\0\1\u01be\1\0\1\u01bf"+
    "\3\0\1\u01c0\1\u01c1\13\0\1\u01c2\1\0\1\u01c3\6\0"+
    "\1\u01c4\20\0\1\330\4\0\1\u01c5\32\0\1\u01c6\1\0"+
    "\1\u01c7\10\0\1\u01c8\1\0\1\u01c9\4\0\1\u01ca\23\0"+
    "\1\211\1\0\1\u01cb\10\0\1\320\5\0\1\u01cc\1\0"+
    "\1\u01cd\21\0\1\u01ce\2\0\1\u01cf\4\0\1\u01d0\55\0"+
    "\1\u01d1\1\0\1\u0157\24\0\1\324\1\0\1\u01d2\10\0"+
    "\1\u01d3\2\0\1\u01d4\1\0\1\u01a7\1\0\1\u01d5\1\211"+
    "\35\0\1\u01d6\3\0\1\330\33\0\1\u01d7\37\0\1\u01d8"+
    "\4\0\1\u01d9\50\0\1\u0112\37\0\1\u014c\3\0\1\u014b"+
    "\44\0\1\u01da\10\0\1\u01db\54\0\1\332\21\0\1\321"+
    "\12\0\1\u01dc\31\0\1\u01dd\1\0\1\u01de\6\0\1\u01df"+
    "\5\0\1\u01e0\31\0\1\u01e1\21\0\1\u01e2\20\0\1\u01e3"+
    "\10\0\1\u01e4\35\0\1\345\4\0\1\u01e5\2\0\1\u01e6"+
    "\34\0\1\u01e7\1\0\1\u01e8\3\0\1\u01e9\42\0\1\u01ea"+
    "\1\u01eb\7\0\1\u01ec\31\0\1\u01ed\13\0\1\u01ee\4\0"+
    "\1\u01ef\40\0\1\u01f0\41\0\1\u01f1\3\0\1\u01f2\5\0"+
    "\1\u01a3\24\0\1\u01f3\1\0\1\u01f4\1\0\1\u01f5\6\0"+
    "\1\u01f6\2\0\1\u01f7\5\0\1\u01f8\27\0\1\u01f9\12\0"+
    "\1\u01fa\30\0\1\u01fb\6\0\1\330\31\0\1\u01fc\2\0"+
    "\1\u01fd\2\0\1\u01fe\2\0\1\u01ff\5\0\1\u0200\26\0"+
    "\1\u0201\6\0\1\u0202\1\u0203\3\0\1\u0204\7\0\1\u0205"+
    "\1\u0206\25\0\1\u0207\1\0\1\u0208\4\0\1\u0209\3\0"+
    "\1\u020a\1\u020b\1\u020c\11\0\1\u020d\11\0\1\u020e\53\0"+
    "\1\u020f\2\0\1\u0210\33\0\1\u0211\7\0\1\334\1\u0212"+
    "\1\u0213\1\0\1\u0214\1\u0215\1\0\1\u0216\1\u0217\1\0"+
    "\1\u0218\30\0\1\276\1\0\1\u0219\41\0\1\u021a\3\0"+
    "\1\u021b\2\0\1\u021c\37\0\1\u021d\3\0\1\u01f9\14\0"+
    "\1\u021e\21\0\1\u021f\5\0\1\u0220\2\0\1\u0221\42\0"+
    "\1\u0222\40\0\1\u0223\1\0\1\u0224\1\u0225\1\0\1\u0226"+
    "\1\0\1\u0190\3\0\1\u0226\5\0\1\u0227\24\0\1\324"+
    "\1\334\1\u0228\4\0\1\130\3\0\1\u0229\42\0\1\u022a"+
    "\44\0\1\u022b\3\0\1\u01a7\5\0\1\u022c\26\0\1\u022d"+
    "\10\0\1\u022e\4\0\1\u022f\24\0\1\u0230\1\0\1\u0231"+
    "\1\0\1\u0232\1\0\1\u0233\2\0\1\u0234\40\0\1\355"+
    "\1\0\1\u0235\1\334\36\0\1\u0236\2\0\1\u0237\10\0"+
    "\1\u0238\5\0\1\u0239\23\0\1\u023a\1\0\1\u023b\6\0"+
    "\1\u023c\43\0\1\u023d\4\0\1\u023e\31\0\1\u023f\1\0"+
    "\1\u0240\44\0\1\u0241\55\0\1\u0242\37\0\1\u0243\45\0"+
    "\1\u0244\47\0\1\u0245\14\0\1\357\23\0\1\u0246\53\0"+
    "\1\u020a\60\0\1\u01d0\1\u0247\23\0\1\u0248\46\0\1\u0249"+
    "\47\0\1\u0155\52\0\1\u024a\47\0\1\u024b\34\0\1\321"+
    "\1\0\1\u024c\13\0\1\u024d\34\0\1\u0151\14\0\1\u024e"+
    "\33\0\1\u024f\50\0\1\u0250\31\0\1\u0251\10\0\1\u0252"+
    "\42\0\1\u0253\2\0\1\u0254\45\0\1\u0255\35\0\1\345"+
    "\1\u0256\2\0\1\321\46\0\1\u024f\37\0\1\u0257\1\0"+
    "\1\u0258\3\0\1\u0259\45\0\1\u025a\64\0\1\330\20\0"+
    "\1\u025b\1\0\1\323\2\0\1\345\54\0\1\u025c\32\0"+
    "\1\u025d\10\0\1\332\4\0\1\u0169\3\0\1\u025e\44\0"+
    "\1\u022c\34\0\1\u0119\55\0\1\u025f\26\0\1\321\50\0"+
    "\1\276\46\0\1\u0151\43\0\1\u0260\46\0\1\321\47\0"+
    "\1\u0208\40\0\1\323\2\0\1\345\15\0\1\345\45\0"+
    "\1\321\24\0\1\324\44\0\1\u010c\13\0\1\u015a\32\0"+
    "\1\345\56\0\1\u0261\44\0\1\276\47\0\1\u0262\3\0"+
    "\1\u0263\43\0\1\u0264\43\0\1\u0265\5\0\1\u016b\33\0"+
    "\1\u0266\34\0\1\276\57\0\1\u0267\34\0\1\u0268\16\0"+
    "\1\u0269\5\0\1\u026a\23\0\1\u026b\66\0\1\u026c\44\0"+
    "\1\u026d\23\0\1\u026e\22\0\1\u026f\27\0\1\u0270\61\0"+
    "\1\u01e2\42\0\1\u024f\2\0\1\332\25\0\1\u0258\3\0"+
    "\1\u014b\42\0\1\u0271\50\0\1\u0226\50\0\1\u0272\36\0"+
    "\1\u0273\6\0\1\u0274\36\0\1\u0275\54\0\1\u0276\4\0"+
    "\1\u0277\43\0\1\u0278\42\0\1\u0279\36\0\1\u027a\51\0"+
    "\1\u027b\60\0\1\u027c\27\0\1\u0112\65\0\1\u0195\22\0"+
    "\1\u027d\53\0\1\u027e\2\0\1\u027f\36\0\1\u0280\51\0"+
    "\1\u0281\41\0\1\u018b\46\0\1\367\47\0\1\u0282\54\0"+
    "\1\u0283\34\0\1\307\42\0\1\276\4\0\1\u0284\42\0"+
    "\1\u0285\46\0\1\u0286\4\0\1\u0287\1\u0288\1\0\1\u0289"+
    "\6\0\1\u028a\1\u028b\26\0\1\u028c\5\0\1\u028d\45\0"+
    "\1\332\35\0\1\u028e\5\0\1\u01a7\45\0\1\u01a7\45\0"+
    "\1\324\1\0\1\355\42\0\1\u028f\37\0\1\u0290\14\0"+
    "\1\u0291\43\0\1\u0292\10\0\1\u0293\22\0\1\156\47\0"+
    "\1\324\43\0\1\55\43\0\1\u0294\47\0\1\u0295\44\0"+
    "\1\u0296\53\0\1\u022c\36\0\1\u0242\10\0\1\u0297\50\0"+
    "\1\276\32\0\1\u0298\12\0\1\u0299\31\0\1\u029a\1\0"+
    "\1\u01f7\1\u029b\1\276\1\0\1\u029c\5\0\1\u0101\5\0"+
    "\1\u029d\25\0\1\u01b4\46\0\1\u029e\3\0\1\u0208\4\0"+
    "\1\u029f\5\0\1\u02a0\45\0\1\u02a1\33\0\1\u02a2\3\0"+
    "\1\u02a3\47\0\1\u02a4\37\0\1\u02a5\13\0\1\u02a6\27\0"+
    "\1\u02a7\54\0\1\u02a8\45\0\1\u02a9\50\0\1\u02aa\4\0"+
    "\1\u02ab\26\0\1\u02ac\42\0\1\u02ad\61\0\1\u02ae\37\0"+
    "\1\u02af\45\0\1\u02b0\34\0\1\u02b1\50\0\1\u0101\10\0"+
    "\1\u02b2\40\0\1\u02b3\36\0\1\u02b4\1\0\1\u02b5\5\0"+
    "\1\u02b6\45\0\1\u02b7\52\0\1\u02b8\44\0\1\u02b9\50\0"+
    "\1\u0187\30\0\1\u02ba\3\0\1\u0253\41\0\1\u02bb\3\0"+
    "\1\u02bc\63\0\1\u02bd\23\0\1\u02be\6\0\1\u01fc\53\0"+
    "\1\u02bf\46\0\1\276\42\0\1\u02c0\50\0\1\u02c1\35\0"+
    "\1\u02c2\36\0\1\u02c3\47\0\1\u0157\64\0\1\276\31\0"+
    "\1\u02c4\1\211\43\0\1\324\2\0\1\u0265\37\0\1\u02c5"+
    "\67\0\1\324\27\0\1\u02c6\2\0\1\u02c7\35\0\1\u02c8"+
    "\10\0\1\276\11\0\1\u02c9\35\0\1\u02ca\6\0\1\321"+
    "\22\0\1\u02cb\21\0\1\u02cc\1\345\36\0\1\u02cd\10\0"+
    "\1\u01e2\44\0\1\u02ce\1\332\34\0\1\u0208\45\0\1\u02cf"+
    "\36\0\1\u02d0\41\0\1\u0112\64\0\1\u02d1\37\0\1\276"+
    "\2\0\1\u02d2\52\0\1\u02d3\37\0\1\u02d4\51\0\1\u02d5"+
    "\41\0\1\u02d6\47\0\1\u02d7\35\0\1\u02d8\36\0\1\u02d9"+
    "\70\0\1\u02da\25\0\1\u02db\44\0\1\u02dc\46\0\1\u02dd"+
    "\6\0\1\u02de\36\0\1\u02df\6\0\1\u02e0\37\0\1\u02e1"+
    "\53\0\1\u02e2\34\0\1\u02e3\1\u02e4\11\0\1\u02e5\40\0"+
    "\1\u02e6\41\0\1\u02e7\3\0\1\u02e8\57\0\1\u02e9\30\0"+
    "\1\u02ea\51\0\1\u02eb\40\0\1\u02ec\53\0\1\355\10\0"+
    "\1\324\33\0\1\u0293\56\0\1\u0263\27\0\1\u02ed\44\0"+
    "\1\321\45\0\1\u02ee\54\0\1\u02ef\36\0\1\u02f0\76\0"+
    "\1\u0112\15\0\1\u02f1\21\0\1\u0229\23\0\1\u0258\4\0"+
    "\1\u02f2\12\0\1\u02f3\46\0\1\u0119\32\0\1\u02f4\41\0"+
    "\1\276\63\0\1\u02f5\23\0\1\u02f6\64\0\1\u02f7\2\0"+
    "\1\u02f8\37\0\1\u02f9\32\0\1\u02fa\5\0\1\u02fb\52\0"+
    "\1\u02fc\33\0\1\u02fd\3\0\1\u0151\15\0\1\u02fe\21\0"+
    "\1\u02ff\51\0\1\u0171\1\0\1\u0300\45\0\1\u0301\42\0"+
    "\1\u0302\2\0\1\55\5\0\1\u0303\42\0\1\353\10\0"+
    "\1\332\22\0\1\u0304\51\0\1\u0305\43\0\1\u0306\1\u0307"+
    "\63\0\1\u022c\26\0\1\u0308\47\0\1\u020a\43\0\1\u0113"+
    "\66\0\1\u015a\24\0\1\u0309\46\0\1\u030a\60\0\1\u030b"+
    "\31\0\1\u030c\63\0\1\u0212\50\0\1\u0225\35\0\1\355"+
    "\35\0\1\u030d\51\0\1\u030e\41\0\1\u030f\57\0\1\u0310"+
    "\33\0\1\u0311\45\0\1\u0312\15\0\1\u0313\25\0\1\u0314"+
    "\45\0\1\u0119\54\0\1\u0315\54\0\1\u0316\3\0\1\u0317"+
    "\24\0\1\u0318\51\0\1\u0319\14\0\1\u0161\31\0\1\u031a"+
    "\53\0\1\u0147\53\0\1\u031b\26\0\1\u031c\41\0\1\u031d"+
    "\56\0\1\355\57\0\1\355\40\0\1\u031e\46\0\1\u031f"+
    "\30\0\1\u0320\1\0\1\u0321\4\0\1\u0155\37\0\1\276"+
    "\53\0\1\321\36\0\1\u0322\51\0\1\321\2\0\1\321"+
    "\36\0\1\345\6\0\1\345\37\0\1\u0323\45\0\1\u0324"+
    "\63\0\1\276\1\u026c\10\0\1\332\23\0\1\320\57\0"+
    "\1\u0325\24\0\1\u0326\51\0\1\321\1\314\11\0\1\u0113"+
    "\42\0\1\u016b\32\0\1\u0327\45\0\1\321\2\0\1\345"+
    "\15\0\1\345\45\0\1\u0113\21\0\1\u0328\6\0\1\u0329"+
    "\7\0\1\u032a\1\0\1\u032b\1\u0306\31\0\1\u0113\2\0"+
    "\1\u032c\36\0\1\u032d\3\0\1\276\2\0\1\u032e\40\0"+
    "\1\u032f\10\0\1\u0262\3\0\1\u0263\44\0\1\u0330\36\0"+
    "\1\324\54\0\1\u0331\31\0\1\u0332\47\0\1\355\41\0"+
    "\1\u0333\72\0\1\u0334\41\0\1\u0335\25\0\1\u0336\44\0"+
    "\1\u0337\45\0\1\u0290\1\u0338\45\0\1\u0339\3\0\1\u033a"+
    "\7\0\1\u033b\31\0\1\u033c\47\0\1\u033d\3\0\1\u033e"+
    "\11\0\1\u033f\23\0\1\u0340\52\0\1\u0341\43\0\1\u0342"+
    "\66\0\1\u0343\31\0\1\u0344\14\0\1\u0112\22\0\1\u0345"+
    "\67\0\1\355\36\0\1\u0346\33\0\1\u0347\16\0\1\u01a7"+
    "\25\0\1\u0348\46\0\1\u0349\16\0\1\u01a7\25\0\1\u034a"+
    "\50\0\1\u034b\12\0\1\372\34\0\1\u034c\37\0\1\u034d"+
    "\46\0\1\u034e\43\0\1\u034f\62\0\1\u0350\32\0\1\u0351"+
    "\47\0\1\324\7\0\1\u0352\33\0\1\u025e\52\0\1\u0249"+
    "\57\0\1\u0353\34\0\1\333\37\0\1\u02fd\3\0\1\u0151"+
    "\61\0\1\u0354\50\0\1\u01a7\34\0\1\u0355\36\0\1\u015a"+
    "\41\0\1\u0356\66\0\1\u01a3\24\0\1\u0357\47\0\1\u0358"+
    "\41\0\1\u0359\52\0\1\u015a\55\0\1\u035a\5\0\1\u035b"+
    "\24\0\1\u035c\55\0\1\u035d\45\0\1\55\44\0\1\u035e"+
    "\54\0\1\u035f\43\0\1\u0360\32\0\1\u0225\45\0\1\u0361"+
    "\44\0\1\u0296\1\u0175\51\0\1\u0362\54\0\1\u015a\36\0"+
    "\1\u0363\53\0\1\u0364\34\0\1\u0226\44\0\1\u0365\52\0"+
    "\1\u0366\1\u0367\40\0\1\u01a7\20\0\1\u02ce\26\0\1\u0368"+
    "\41\0\1\276\1\0\1\u0117\53\0\1\u0369\47\0\1\u032e"+
    "\54\0\1\u036a\23\0\1\u036b\47\0\1\u036c\45\0\1\u036d"+
    "\55\0\1\324\42\0\1\u036e\10\0\1\u036f\41\0\1\355"+
    "\55\0\1\u02a7\22\0\1\u031e\47\0\1\u0370\66\0\1\u0371"+
    "\44\0\1\u0372\24\0\1\u0373\51\0\1\156\53\0\1\u0101"+
    "\32\0\1\324\45\0\1\u0374\60\0\1\320\33\0\1\u0375"+
    "\57\0\1\u0376\34\0\1\u030b\20\0\1\276\23\0\1\u0349"+
    "\1\u0377\44\0\1\u0378\45\0\1\u0379\53\0\1\u01bc\45\0"+
    "\1\211\46\0\1\u037a\1\211\40\0\1\u0113\42\0\1\55"+
    "\4\0\1\u037b\57\0\1\324\25\0\1\355\61\0\1\355"+
    "\32\0\1\u037c\44\0\1\345\60\0\1\u037d\41\0\1\u037e"+
    "\40\0\1\u017e\6\0\1\355\7\0\1\u037f\62\0\1\u0380"+
    "\6\0\1\u0119\1\0\1\u0119\44\0\1\u0381\45\0\1\u0382"+
    "\1\0\1\u0383\10\0\1\u0381\32\0\1\330\5\0\1\u0384"+
    "\60\0\1\u0383\37\0\1\u0385\40\0\1\u0386\53\0\1\u0387"+
    "\37\0\1\u0388\60\0\1\u019d\32\0\1\u0389\37\0\1\u014d"+
    "\11\0\1\u0195\10\0\1\u038a\20\0\1\u038b\17\0\1\156"+
    "\1\0\1\u038c\25\0\1\u038d\46\0\1\u038e\7\0\1\324"+
    "\42\0\1\211\36\0\1\u038f\45\0\1\u0242\46\0\1\u0390"+
    "\70\0\1\u036f\25\0\1\u0225\43\0\1\u0391\53\0\1\u0392"+
    "\3\0\1\u0349\32\0\1\u0393\54\0\1\u0394\37\0\1\u035d"+
    "\47\0\1\u0322\65\0\1\u0395\22\0\1\u0396\46\0\1\u0397"+
    "\3\0\1\u0398\53\0\1\u0399\51\0\1\u039a\44\0\1\u039b"+
    "\1\0\1\332\45\0\1\u01e2\26\0\1\u0270\57\0\1\u039c"+
    "\6\0\1\u0345\25\0\1\u039d\42\0\1\u039e\61\0\1\345"+
    "\45\0\1\u039f\36\0\1\u036e\52\0\1\u03a0\53\0\1\321"+
    "\42\0\1\u03a1\44\0\1\324\33\0\1\u03a2\6\0\1\u03a3"+
    "\43\0\1\u010c\41\0\1\u03a4\47\0\1\345\55\0\1\u0229"+
    "\30\0\1\u03a5\46\0\1\345\4\0\1\u0151\40\0\1\345"+
    "\3\0\1\321\40\0\1\u0399\50\0\1\u03a6\43\0\1\u026c"+
    "\44\0\1\u03a7\45\0\1\u03a8\62\0\1\u03a9\33\0\1\u03aa"+
    "\67\0\1\211\20\0\1\u03ab\67\0\1\u03ac\47\0\1\u0226"+
    "\24\0\1\u03ad\42\0\1\u03ae\70\0\1\355\33\0\1\u03af"+
    "\54\0\1\u03b0\47\0\1\u027f\26\0\1\u03b1\51\0\1\u03b2"+
    "\47\0\1\u03b3\41\0\1\u03b4\41\0\1\u03b5\45\0\1\u0225"+
    "\67\0\1\u0225\36\0\1\u03b6\53\0\1\u0269\43\0\1\u0282"+
    "\27\0\1\u028c\45\0\1\u0142\45\0\1\u03b7\54\0\1\u03b8"+
    "\47\0\1\u026c\32\0\1\u03b9\2\0\1\u03ba\53\0\1\u03bb"+
    "\36\0\1\u03bc\45\0\1\324\3\0\1\u0151\37\0\1\u0311"+
    "\62\0\1\u0113\45\0\1\u03bd\31\0\1\u03be\66\0\1\u03bf"+
    "\25\0\1\u01a2\47\0\1\u0101\44\0\1\u02aa\57\0\1\276"+
    "\33\0\1\u03c0\60\0\1\u03c1\30\0\1\u03c2\46\0\1\u03c3"+
    "\45\0\1\u03c4\44\0\1\u03c5\3\0\1\u03bd\56\0\1\u03c6"+
    "\31\0\1\u03c7\56\0\1\u03c8\11\0\1\u01b4\21\0\1\u03c9"+
    "\61\0\1\u03ca\34\0\1\u0101\1\0\1\u03cb\54\0\1\u03cc"+
    "\32\0\1\u03cd\44\0\1\u03ce\44\0\1\u03cf\47\0\1\u03d0"+
    "\46\0\1\u03d1\62\0\1\u03d2\45\0\1\u03d3\31\0\1\355"+
    "\65\0\1\u01a7\24\0\1\u03d4\60\0\1\u03d5\30\0\1\u0378"+
    "\70\0\1\211\45\0\1\u03d6\40\0\1\u03d7\26\0\1\265"+
    "\47\0\1\u03d8\57\0\1\u03d9\52\0\1\u03da\40\0\1\u01bf"+
    "\42\0\1\u03db\34\0\1\u0226\53\0\1\u03dc\40\0\1\u03dd"+
    "\61\0\1\324\41\0\1\u03de\36\0\1\u03df\45\0\1\u03e0"+
    "\65\0\1\u03e1\30\0\1\211\43\0\1\u03e2\45\0\1\u0129"+
    "\50\0\1\u03e3\51\0\1\345\54\0\1\u0265\46\0\1\u02b9"+
    "\35\0\1\321\41\0\1\u014b\15\0\1\u0300\41\0\1\u03e4"+
    "\36\0\1\u03e5\54\0\1\u03e6\35\0\1\u03e7\53\0\1\u01db"+
    "\30\0\1\u03e8\60\0\1\u03e9\33\0\1\u03ea\61\0\1\u03eb"+
    "\51\0\1\u0135\25\0\1\u03ec\46\0\1\u03ed\4\0\1\u03ee"+
    "\45\0\1\u0115\37\0\1\u03ef\54\0\1\u03f0\36\0\1\u0240"+
    "\46\0\1\u03f1\47\0\1\u03f2\55\0\1\u03f3\33\0\1\u03f4"+
    "\47\0\1\u026a\54\0\1\u0226\32\0\1\211\52\0\1\u03f5"+
    "\50\0\1\u0270\51\0\1\321\40\0\1\u03f6\2\0\1\u03f7"+
    "\35\0\1\u03b2\42\0\1\u03f8\71\0\1\u02a6\24\0\1\u03f9"+
    "\66\0\1\321\21\0\1\u026c\46\0\1\u03fa\52\0\1\u03fb"+
    "\61\0\1\u03fc\26\0\1\u0378\10\0\1\u0147\32\0\1\u0296"+
    "\3\0\1\276\42\0\1\u03fd\3\0\1\u014b\57\0\1\345"+
    "\30\0\1\u03fe\44\0\1\u03ff\44\0\1\u0400\54\0\1\u0401"+
    "\6\0\1\u0188\31\0\1\156\44\0\1\u0258\50\0\1\u0402"+
    "\60\0\1\u0403\45\0\1\211\24\0\1\u0112\50\0\1\u02ba"+
    "\45\0\1\u0404\46\0\1\u0101\4\0\1\u0294\53\0\1\u0405"+
    "\37\0\1\u0406\42\0\1\u02d0\1\u014b\40\0\1\276\46\0"+
    "\1\u020a\54\0\1\u0407\37\0\1\u0408\62\0\1\330\30\0"+
    "\1\355\52\0\1\u0409\46\0\1\u040a\50\0\1\u040b\42\0"+
    "\1\u040c\35\0\1\u03be\13\0\1\u040d\3\0\1\u040e\41\0"+
    "\1\u040f\41\0\1\u02e0\55\0\1\u0410\32\0\1\u0411\55\0"+
    "\1\u0412\40\0\1\u0413\36\0\1\u0414\56\0\1\u0415\47\0"+
    "\1\u0416\40\0\1\u0244\67\0\1\u01e2\27\0\1\u0417\32\0"+
    "\1\u03bd\46\0\1\u02ab\1\0\1\u0327\1\0\1\u0329\6\0"+
    "\1\u03bd\30\0\1\u0418\5\0\1\323\41\0\1\u03c8\44\0"+
    "\1\u0419\44\0\1\213\1\0\1\u016b\3\0\1\u041a\2\0"+
    "\1\u0229\45\0\1\u0276\33\0\1\u041b\54\0\1\u041c\40\0"+
    "\1\u041d\47\0\1\330\45\0\1\u041e\41\0\1\u041f\63\0"+
    "\1\u0420\40\0\1\u0421\61\0\1\u0422\24\0\1\u0423\43\0"+
    "\1\u03c5\43\0\1\u0424\55\0\1\u018b\36\0\1\u0425\10\0"+
    "\1\u0426\35\0\1\u0427\46\0\1\u0428\54\0\1\u0429\45\0"+
    "\1\u042a\41\0\1\u042b\67\0\1\u042c\23\0\1\u0321\42\0"+
    "\1\u02bc\1\0\1\324\1\0\1\u02a7\40\0\1\u042d\62\0"+
    "\1\u042e\35\0\1\u03ab\43\0\1\276\15\0\1\u0214\50\0"+
    "\1\u042f\23\0\1\u0430\44\0\1\u0431\44\0\1\344\47\0"+
    "\1\u0432\43\0\1\u0111\46\0\1\u0433\46\0\1\u0392\47\0"+
    "\1\u0434\64\0\1\u0112\43\0\1\u0435\43\0\1\u0436\27\0"+
    "\1\u0437\43\0\1\55\51\0\1\u0171\1\0\1\u0111\41\0"+
    "\1\u0438\66\0\1\u0439\41\0\1\u043a\34\0\1\u043b\42\0"+
    "\1\u0175\50\0\1\u043c\40\0\1\u043d\46\0\1\u043e\46\0"+
    "\1\u025e\44\0\1\u013e\52\0\1\276\40\0\1\u043f\45\0"+
    "\1\u030b\55\0\1\u0112\43\0\1\u0101\41\0\1\355\1\0"+
    "\1\u0300\53\0\1\u0440\33\0\1\u0441\3\0\1\u03ab\42\0"+
    "\1\u0442\56\0\1\u020d\54\0\1\u0443\24\0\1\u026c\53\0"+
    "\1\330\41\0\1\324\2\0\1\u03d1\62\0\1\u0444\24\0"+
    "\1\324\57\0\1\u0445\35\0\1\u0114\54\0\1\u0112\32\0"+
    "\1\u0446\54\0\1\u0447\40\0\1\u0448\43\0\1\u02c1\61\0"+
    "\1\u02b9\50\0\1\u0322\43\0\1\u0449\31\0\1\u0322\44\0"+
    "\1\u044a\46\0\1\u044b\60\0\1\u044c\32\0\1\u0232\60\0"+
    "\1\u0232\32\0\1\u0416\43\0\1\u044d\53\0\1\u03e0\40\0"+
    "\1\u044e\44\0\1\u03dc\45\0\1\u044f\53\0\1\u038f\56\0"+
    "\1\u03c2\26\0\1\u0450\67\0\1\211\34\0\1\276\45\0"+
    "\1\u0451\45\0\1\u0452\42\0\1\u0453\45\0\1\u0454\37\0"+
    "\1\u0455\53\0\1\u0416\41\0\1\u0456\77\0\1\u0269\16\0"+
    "\1\u0345\62\0\1\u0457\43\0\1\355\27\0\1\u0101\44\0"+
    "\1\u0458\52\0\1\u0151\11\0\1\u03e4\33\0\1\u0459\41\0"+
    "\1\u045a\43\0\1\u045b\50\0\1\u045c\50\0\1\u045d\47\0"+
    "\1\u045e\42\0\1\u026c\47\0\1\u045f\41\0\1\u0269\44\0"+
    "\1\u0460\45\0\1\u0461\42\0\1\u036f\70\0\1\u026c\30\0"+
    "\1\u0462\45\0\1\u0294\65\0\1\u0463\42\0\1\307\46\0"+
    "\1\u0464\22\0\1\276\50\0\1\u0465\60\0\1\u0466\30\0"+
    "\1\u0467\64\0\1\u0468\41\0\1\u0469\34\0\1\u046a\53\0"+
    "\1\u046b\45\0\1\u046c\44\0\1\u046d\52\0\1\u046e\40\0"+
    "\1\u03e2\40\0\1\u046f\50\0\1\u0470\42\0\1\u01a7\42\0"+
    "\1\u0471\12\0\1\u0472\50\0\1\u0340\31\0\1\u02ab\1\0"+
    "\1\u0327\1\0\1\u0329\43\0\1\u0473\1\0\1\u0474\14\0"+
    "\1\u0475\23\0\1\u0290\50\0\1\u0327\1\0\1\u0329\56\0"+
    "\1\u0476\30\0\1\u0477\54\0\1\u0478\37\0\1\u01c7\56\0"+
    "\1\u0214\45\0\1\u0479\33\0\1\u0321\45\0\1\u047a\60\0"+
    "\1\u0225\33\0\1\u047b\50\0\1\u047c\13\0\1\u047d\24\0"+
    "\1\u047e\51\0\1\u0155\43\0\1\u0225\43\0\1\u047f\43\0"+
    "\1\u0195\62\0\1\u0480\34\0\1\211\65\0\1\324\25\0"+
    "\1\u0481\52\0\1\276\36\0\1\u0271\44\0\1\u02e8\46\0"+
    "\1\u036e\60\0\1\u0482\31\0\1\u0349\56\0\1\u026c\54\0"+
    "\1\u026c\34\0\1\u0483\57\0\1\u0484\24\0\1\u0485\61\0"+
    "\1\u0365\41\0\1\u0486\42\0\1\u0487\43\0\1\u0488\63\0"+
    "\1\u0489\31\0\1\u048a\42\0\1\u048b\3\0\1\u048c\50\0"+
    "\1\u048d\50\0\1\211\33\0\1\u048e\62\0\1\u048f\34\0"+
    "\1\u0490\37\0\1\u0491\56\0\1\u0492\56\0\1\u030b\44\0"+
    "\1\u0493\31\0\1\324\10\0\1\u02d7\33\0\1\276\4\0"+
    "\1\u0494\37\0\1\u0495\44\0\1\u0258\1\0\1\276\1\0"+
    "\1\u014b\37\0\1\265\1\0\1\u02e8\72\0\1\u0496\20\0"+
    "\1\u0497\3\0\1\u014b\42\0\1\u047f\46\0\1\u0473\16\0"+
    "\1\u0475\24\0\1\u015a\62\0\1\u0498\50\0\1\u015a\1\u0499"+
    "\44\0\1\u049a\34\0\1\u049b\42\0\1\u049c\56\0\1\u049d"+
    "\45\0\1\u049e\34\0\1\u049f\41\0\1\u04a0\51\0\1\u04a1"+
    "\40\0\1\u026a\45\0\1\u01db\13\0\1\u0350\30\0\1\u04a2"+
    "\50\0\1\u04a3\45\0\1\u03ba\55\0\1\u04a4\37\0\1\210"+
    "\45\0\1\332\55\0\1\u04a5\55\0\1\u01e2\20\0\1\u04a6"+
    "\67\0\1\u02c1\25\0\1\u02ab\1\0\1\u0327\10\0\1\u03bd"+
    "\30\0\1\u048f\51\0\1\u0345\43\0\1\u04a7\43\0\1\u0453"+
    "\45\0\1\u04a8\56\0\1\u04a9\35\0\1\u04aa\60\0\1\u04ab"+
    "\46\0\1\u04ac\31\0\1\u0101\60\0\1\u04ad\42\0\1\u04ae"+
    "\34\0\1\u04af\70\0\1\u04b0\37\0\1\u0112\52\0\1\u04b1"+
    "\25\0\1\u04b2\45\0\1\u04b3\61\0\1\u04b4\43\0\1\u04b5"+
    "\34\0\1\u026a\55\0\1\u04b6\5\0\1\u04b7\26\0\1\u0349"+
    "\61\0\1\u04b8\50\0\1\u04b9\41\0\1\u04ba\33\0\1\u018b"+
    "\53\0\1\u020a\45\0\1\u04bb\37\0\1\u04bc\64\0\1\u0349"+
    "\30\0\1\u04bd\50\0\1\u04be\35\0\1\u04bf\45\0\1\u04c0"+
    "\47\0\1\372\43\0\1\u04c1\55\0\1\u0294\41\0\1\u0487"+
    "\54\0\1\u04c2\46\0\1\u04c3\56\0\1\u04c4\22\0\1\u04c5"+
    "\67\0\1\u04c6\27\0\1\u023f\36\0\1\u04c7\72\0\1\u04c8"+
    "\41\0\1\u04c9\44\0\1\u04ca\35\0\1\u01a7\51\0\1\u02af"+
    "\41\0\1\334\52\0\1\u026c\33\0\1\u04cb\60\0\1\u0345"+
    "\44\0\1\u04cc\34\0\1\u04cd\56\0\1\u04ce\33\0\1\u04cf"+
    "\45\0\1\u0217\65\0\1\u04d0\24\0\1\u04d1\62\0\1\u04d2"+
    "\51\0\1\u04d3\31\0\1\u04d4\41\0\1\u04d5\43\0\1\u04d6"+
    "\47\0\1\u04d7\54\0\1\u0288\44\0\1\u01f4\35\0\1\u04d8"+
    "\65\0\1\u04d9\43\0\1\u04da\50\0\1\u026c\40\0\1\u04db"+
    "\41\0\1\371\46\0\1\u04dc\45\0\1\u04dd\35\0\1\u04de"+
    "\20\0\1\u04df\36\0\1\u04e0\43\0\1\u04e1\36\0\1\u04e2"+
    "\65\0\1\u04e3\25\0\1\u04e4\57\0\1\u04e5\34\0\1\u0101"+
    "\56\0\1\u01a7\32\0\1\u04e6\44\0\1\u04e7\60\0\1\u04e8"+
    "\43\0\1\u04e9\52\0\1\u04ea\51\0\1\u0347\25\0\1\u04eb"+
    "\43\0\1\u04ec\56\0\1\u04ed\41\0\1\u04e9\46\0\1\u04ee"+
    "\61\0\1\u0345\23\0\1\u01bc\53\0\1\u04ef\55\0\1\u04f0"+
    "\51\0\1\u04f1\37\0\1\u04f2\53\0\1\u04f3\33\0\1\u02a7"+
    "\51\0\1\u0378\41\0\1\u04f4\61\0\1\u028f\21\0\1\u04f5"+
    "\55\0\1\u04f6\51\0\1\u0155\61\0\1\u04f7\20\0\1\276"+
    "\1\0\1\u02d0\62\0\1\u0378\31\0\1\u0409\41\0\1\u01c7"+
    "\50\0\1\u04db\72\0\1\211\16\0\1\u04f8\56\0\1\u04f9"+
    "\41\0\1\u04fa\53\0\1\u04fb\51\0\1\u047a\26\0\1\320"+
    "\60\0\1\u04fc\46\0\1\u01bc\30\0\1\u04fd\53\0\1\u03e0"+
    "\40\0\1\u04fe\66\0\1\u0113\32\0\1\334\52\0\1\u04ff"+
    "\37\0\1\u0500\37\0\1\u0501\63\0\1\u03cb\41\0\1\u0502"+
    "\35\0\1\u0503\52\0\1\u0504\43\0\1\u0505\41\0\1\u04e9"+
    "\47\0\1\u0327\46\0\1\u0506\41\0\1\u0256\43\0\1\u0507"+
    "\56\0\1\u0507\35\0\1\u0508\44\0\1\u0509\53\0\1\u050a"+
    "\53\0\1\u0327\33\0\1\u050b\44\0\1\u050c\50\0\1\u0488"+
    "\42\0\1\u050d\52\0\1\u050e\50\0\1\u0380\36\0\1\u050f"+
    "\46\0\1\u0510\64\0\1\u0438\33\0\1\u0511\61\0\1\u010c"+
    "\21\0\1\u0512\67\0\1\324\43\0\1\u0513\43\0\1\u0514"+
    "\51\0\1\u0515\41\0\1\u0516\40\0\1\371\42\0\1\310"+
    "\36\0\1\u0517\1\0\1\u0518\46\0\1\u0519\57\0\1\u051a"+
    "\34\0\1\u0345\45\0\1\u051b\60\0\1\u0156\32\0\1\u051c"+
    "\60\0\1\u051d\27\0\1\u03ac\64\0\1\u051e\51\0\1\u0101"+
    "\40\0\1\u051f\30\0\1\u03cb\47\0\1\u0520\42\0\1\u0477"+
    "\47\0\1\u0521\50\0\1\u034b\46\0\1\u0522\61\0\1\u0523"+
    "\36\0\1\u0524\54\0\1\u0214\42\0\1\u0525\31\0\1\u0526"+
    "\62\0\1\u0527\26\0\1\u0528\57\0\1\u0529\10\0\1\u052a"+
    "\37\0\1\u052b\30\0\1\u03b4\66\0\1\u02a7\41\0\1\u052c"+
    "\30\0\1\u01a7\54\0\1\u0113\66\0\1\276\36\0\1\u052d"+
    "\30\0\1\u052e\50\0\1\u052f\44\0\1\u0530\44\0\1\u0531"+
    "\55\0\1\u0532\27\0\1\u0533\51\0\1\371\51\0\1\u0534"+
    "\37\0\1\u0535\65\0\1\u0101\26\0\1\u0536\57\0\1\u0537"+
    "\31\0\1\u028f\55\0\1\u0538\44\0\1\u03b2\45\0\1\u039d"+
    "\57\0\1\u04ca\25\0\1\u02a7\52\0\1\u0539\41\0\1\131"+
    "\60\0\1\u053a\33\0\1\u0438\62\0\1\u043d\42\0\1\u053b"+
    "\26\0\1\u053c\6\0\1\u0531\40\0\1\u053d\55\0\1\u053e"+
    "\45\0\1\u053f\50\0\1\u0428\51\0\1\u0154\32\0\1\u0503"+
    "\45\0\1\u03ac\40\0\1\u0540\67\0\1\u0541\24\0\1\u0542"+
    "\46\0\1\u04de\55\0\1\u0101\42\0\1\324\60\0\1\u0111"+
    "\34\0\1\u0543\56\0\1\u0544\25\0\1\u04e3\45\0\1\u0545"+
    "\51\0\1\u0546\56\0\1\u0547\26\0\1\u0548\70\0\1\u0549"+
    "\22\0\1\u054a\47\0\1\u0487\46\0\1\u054b\50\0\1\u054c"+
    "\50\0\1\u054d\50\0\1\u054e\55\0\1\u054f\31\0\1\u0550"+
    "\37\0\1\u0551\46\0\1\371\54\0\1\u0552\44\0\1\u0553"+
    "\42\0\1\u0489\50\0\1\u03cd\50\0\1\u0554\50\0\1\u0555"+
    "\43\0\1\u0556\31\0\1\u0557\70\0\1\u0515\43\0\1\131"+
    "\23\0\1\u0558\56\0\1\u0559\37\0\1\u026c\44\0\1\u0506"+
    "\57\0\1\u055a\42\0\1\u055b\35\0\1\u055c\66\0\1\u0428"+
    "\23\0\1\u055d\66\0\1\u055e\26\0\1\u055f\54\0\1\u03d0"+
    "\50\0\1\u0560\47\0\1\u0561\46\0\1\u0562\36\0\1\u04fe"+
    "\57\0\1\u0563\31\0\1\u0564\50\0\1\u03e0\36\0\1\u0565"+
    "\51\0\1\u0566\41\0\1\u0567\44\0\1\u0568\60\0\1\u04b3"+
    "\47\0\1\u0569\30\0\1\324\5\0\1\u01a7\52\0\1\u0154"+
    "\50\0\1\u0255\32\0\1\u04de\43\0\1\u0102\50\0\1\u0479"+
    "\41\0\1\u056a\54\0\1\u056b\40\0\1\u056c\64\0\1\u04e9"+
    "\37\0\1\u056d\54\0\1\u0349\32\0\1\u056e\51\0\1\u04e8"+
    "\42\0\1\u056f\56\0\1\u0570\26\0\1\u0571\42\0\1\u0572"+
    "\71\0\1\u0573\41\0\1\324\32\0\1\u0574\61\0\1\u0515"+
    "\24\0\1\u0575\45\0\1\u0576\70\0\1\276\33\0\1\u0577"+
    "\42\0\1\u0578\43\0\1\u04e3\44\0\1\u0579\64\0\1\u057a"+
    "\37\0\1\u0138\35\0\1\u04e9\43\0\1\u0515\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[50426];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\33\1\2\11\1\1\1\0\1\1\1\0"+
    "\1\1\5\0\1\1\6\0\1\1\3\0\2\1\6\0"+
    "\1\1\26\0\1\1\1\0\1\1\2\0\1\11\1\1"+
    "\1\0\1\11\17\0\1\1\2\0\1\1\20\0\1\1"+
    "\1\0\1\1\7\0\1\1\5\0\1\1\3\0\1\1"+
    "\11\0\1\1\6\0\1\1\24\0\1\1\2\0\1\1"+
    "\1\11\7\0\1\1\10\0\1\1\1\0\1\1\2\0"+
    "\1\11\11\0\1\1\6\0\1\11\3\0\1\11\3\0"+
    "\1\1\12\0\1\1\1\11\7\0\1\11\15\0\1\1"+
    "\6\0\1\1\4\0\1\1\4\0\1\1\33\0\3\1"+
    "\10\0\1\1\4\0\1\1\1\0\1\1\10\0\1\11"+
    "\2\0\1\11\12\0\2\1\12\0\1\1\50\0\1\1"+
    "\1\0\1\1\4\0\1\1\3\0\1\1\10\0\1\1"+
    "\27\0\1\1\1\11\2\0\1\1\4\0\1\1\5\0"+
    "\1\1\26\0\1\1\1\0\1\1\14\0\1\1\5\0"+
    "\1\1\13\0\1\1\7\0\1\1\4\0\1\11\12\0"+
    "\1\11\1\0\1\1\12\0\1\11\1\0\1\1\26\0"+
    "\2\1\30\0\1\1\6\0\1\11\25\0\1\1\11\0"+
    "\1\1\13\0\2\1\5\0\2\1\30\0\1\1\24\0"+
    "\1\1\1\0\1\11\2\0\1\11\2\0\1\1\7\0"+
    "\1\1\16\0\1\1\17\0\1\11\11\0\1\1\2\0"+
    "\1\1\2\0\1\1\11\0\1\11\4\0\1\1\5\0"+
    "\1\11\4\0\1\11\7\0\1\1\2\0\1\1\2\0"+
    "\1\1\1\0\2\1\3\0\1\1\4\0\1\1\3\0"+
    "\1\11\1\1\53\0\1\1\2\0\1\1\6\0\1\11"+
    "\1\0\1\1\2\0\1\1\3\0\1\1\15\0\1\1"+
    "\6\0\1\11\4\0\2\1\17\0\2\1\2\0\1\1"+
    "\1\0\1\1\6\0\1\11\5\0\2\1\2\0\1\11"+
    "\6\0\1\1\25\0\1\11\1\0\1\11\25\0\2\1"+
    "\2\0\1\1\7\0\1\1\32\0\1\1\21\0\2\1"+
    "\1\0\1\11\15\0\1\1\3\0\1\11\6\0\1\1"+
    "\47\0\1\1\4\0\1\1\10\0\1\11\17\0\1\1"+
    "\13\0\1\1\31\0\1\1\15\0\1\1\17\0\1\11"+
    "\2\0\1\11\1\1\3\0\1\11\4\0\2\11\24\0"+
    "\1\11\7\0\1\11\6\0\1\11\5\0\1\1\44\0"+
    "\1\11\102\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1402];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
   private Symbol symbol(int type,Object value){
        return new Symbol(type,yyline,yycolumn, value);
       }
 private Symbol symbol(int type){
        return new Symbol(type,yyline,yycolumn);
       }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 41: 
          { return new Symbol(sym.VerbIrregIng, yychar, yyline,yytext());
          }
        case 51: break;
        case 21: 
          { return new Symbol(sym.VerbIrregPast, yychar, yyline,yytext());
          }
        case 52: break;
        case 33: 
          { return new Symbol(sym.AuxDo, yychar, yyline,yytext());
          }
        case 53: break;
        case 43: 
          { return new Symbol(sym.CS_Casuales, yychar, yyline,yytext());
          }
        case 54: break;
        case 7: 
          { return new Symbol(sym.VerbBe, yychar, yyline,yytext());
          }
        case 55: break;
        case 4: 
          { return new Symbol(sym.PronPerSingulares, yychar, yyline,yytext());
          }
        case 56: break;
        case 8: 
          { return new Symbol(sym.preposiciones, yychar, yyline,yytext());
          }
        case 57: break;
        case 31: 
          { return new Symbol(sym.AdDemostrativos, yychar, yyline,yytext());
          }
        case 58: break;
        case 25: 
          { return new Symbol(sym.AdvTiempo, yychar, yyline,yytext());
          }
        case 59: break;
        case 12: 
          { return new Symbol(sym.AdvLugar, yychar, yyline,yytext());
          }
        case 60: break;
        case 13: 
          { return new Symbol(sym.VerbIs, yychar, yyline,yytext());
          }
        case 61: break;
        case 28: 
          { return new Symbol(sym.AdvAfirmacion, yychar, yyline,yytext());
          }
        case 62: break;
        case 49: 
          { return new Symbol(sym.CS_Finales, yychar, yyline,yytext());
          }
        case 63: break;
        case 40: 
          { return new Symbol(sym.VerbosRegIng, yychar, yyline,yytext());
          }
        case 64: break;
        case 37: 
          { return new Symbol(sym.AuxWill, yychar, yyline,yytext());
          }
        case 65: break;
        case 50: 
          { return new Symbol(sym.AuxGoing, yychar, yyline,yytext());
          }
        case 66: break;
        case 20: 
          { return new Symbol(sym.VerbosRegPresent, yychar, yyline,yytext());
          }
        case 67: break;
        case 17: 
          { return new Symbol(sym.AdvCantidad, yychar, yyline,yytext());
          }
        case 68: break;
        case 27: 
          { return new Symbol(sym.ArtDefinidos, yychar, yyline,yytext());
          }
        case 69: break;
        case 6: 
          { return new Symbol(sym.SigPunt, yychar, yyline,yytext());
          }
        case 70: break;
        case 47: 
          { return new Symbol(sym.CS_Concesivas, yychar, yyline,yytext());
          }
        case 71: break;
        case 44: 
          { return new Symbol(sym.CC_Distributivas, yychar, yyline,yytext());
          }
        case 72: break;
        case 14: 
          { return new Symbol(sym.CC_Disyuntivas, yychar, yyline,yytext());
          }
        case 73: break;
        case 36: 
          { return new Symbol(sym.VerbWere, yychar, yyline,yytext());
          }
        case 74: break;
        case 11: 
          { return new Symbol(sym.CS_Condicionales, yychar, yyline,yytext());
          }
        case 75: break;
        case 34: 
          { return new Symbol(sym.PronDemostrativos, yychar, yyline,yytext());
          }
        case 76: break;
        case 46: 
          { return new Symbol(sym.CC_Explicativas, yychar, yyline,yytext());
          }
        case 77: break;
        case 22: 
          { return new Symbol(sym.AdCalificativos, yychar, yyline,yytext());
          }
        case 78: break;
        case 26: 
          { return new Symbol(sym.AdNumCardinal, yychar, yyline,yytext());
          }
        case 79: break;
        case 45: 
          { return new Symbol(sym.CS_Consecutivas, yychar, yyline,yytext());
          }
        case 80: break;
        case 35: 
          { return new Symbol(sym.AdvModo, yychar, yyline,yytext());
          }
        case 81: break;
        case 42: 
          { return new Symbol(sym.AdvDuda, yychar, yyline,yytext());
          }
        case 82: break;
        case 3: 
          { return new Symbol(sym.ArtIndefinidos, yychar, yyline,yytext());
          }
        case 83: break;
        case 38: 
          { return new Symbol(sym.VerbBeing, yychar, yyline,yytext());
          }
        case 84: break;
        case 23: 
          { return new Symbol(sym.VerbAre, yychar, yyline,yytext());
          }
        case 85: break;
        case 19: 
          { return new Symbol(sym.AdIndefinidos, yychar, yyline,yytext());
          }
        case 86: break;
        case 48: 
          { return new Symbol(sym.CC_Adversativas, yychar, yyline,yytext());
          }
        case 87: break;
        case 18: 
          { return new Symbol(sym.Sustantivos, yychar, yyline,yytext());
          }
        case 88: break;
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 89: break;
        case 39: 
          { return new Symbol(sym.AdNumOrdinal, yychar, yyline,yytext());
          }
        case 90: break;
        case 30: 
          { return new Symbol(sym.VerbWas, yychar, yyline,yytext());
          }
        case 91: break;
        case 24: 
          { return new Symbol(sym.CC_Copulativas, yychar, yyline,yytext());
          }
        case 92: break;
        case 29: 
          { return new Symbol(sym.PronInterrogativos, yychar, yyline,yytext());
          }
        case 93: break;
        case 15: 
          { return new Symbol(sym.AdvNegacion, yychar, yyline,yytext());
          }
        case 94: break;
        case 5: 
          { return new Symbol(sym.PronI, yychar, yyline,yytext());
          }
        case 95: break;
        case 32: 
          { return new Symbol(sym.VerbRegPast, yychar, yyline,yytext());
          }
        case 96: break;
        case 2: 
          { /*Ignore*/
          }
        case 97: break;
        case 16: 
          { return new Symbol(sym.AdPosesivos, yychar, yyline,yytext());
          }
        case 98: break;
        case 10: 
          { return new Symbol(sym.VerbosIrregPresent, yychar, yyline,yytext());
          }
        case 99: break;
        case 9: 
          { return new Symbol(sym.VerbAm, yychar, yyline,yytext());
          }
        case 100: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
