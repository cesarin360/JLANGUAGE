/* The following code was generated by JFlex 1.4.3 on 14/05/22 17:27 */

package Clases;
import static Clases.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14/05/22 17:27 from the specification file
 * <tt>C:/Users/Jefferson/Documents/NetBeansProjects/PROYECTOFINAL_COMPILADOR/src/Clases/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\44\2\0\1\1\22\0\1\21\6\0\1\41\4\0"+
    "\1\1\1\32\1\43\2\0\1\33\7\0\1\34\1\43\1\43\15\0"+
    "\1\40\27\0\1\3\1\2\1\12\1\10\1\5\1\16\1\23\1\20"+
    "\1\11\1\31\1\15\1\13\1\24\1\17\1\14\1\27\1\36\1\6"+
    "\1\25\1\4\1\22\1\30\1\26\1\37\1\7\1\35\71\0\1\42"+
    "\uff4b\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\5\1\1\4\7\1"+
    "\1\2\11\1\1\5\1\6\1\7\1\0\1\10\1\0"+
    "\1\11\5\0\1\11\6\0\1\3\3\0\1\12\1\11"+
    "\6\0\1\11\26\0\1\13\1\0\1\4\2\0\1\14"+
    "\1\15\1\0\1\16\17\0\1\17\2\0\1\11\20\0"+
    "\1\20\1\0\1\4\7\0\1\15\5\0\1\13\3\0"+
    "\1\21\11\0\1\22\6\0\1\23\24\0\1\24\2\0"+
    "\1\13\1\25\7\0\1\26\10\0\1\27\1\0\1\13"+
    "\2\0\1\30\11\0\1\11\6\0\1\27\3\0\1\31"+
    "\3\0\1\26\12\0\1\22\1\32\7\0\1\33\15\0"+
    "\1\34\6\0\1\22\4\0\1\35\4\0\1\34\33\0"+
    "\1\36\1\4\1\25\10\0\1\30\4\0\1\26\1\0"+
    "\1\13\10\0\1\21\2\0\1\24\12\0\2\25\12\0"+
    "\1\26\50\0\1\34\1\0\1\15\4\0\1\25\3\0"+
    "\1\24\10\0\1\11\27\0\1\20\1\17\2\0\1\33"+
    "\4\0\1\21\5\0\1\37\26\0\1\25\1\0\1\25"+
    "\14\0\1\30\5\0\1\25\13\0\1\34\7\0\1\25"+
    "\4\0\1\4\12\0\1\22\1\0\1\40\12\0\1\37"+
    "\1\0\1\37\26\0\1\15\1\25\30\0\1\13\6\0"+
    "\1\11\25\0\1\11\11\0\1\15\13\0\1\41\1\32"+
    "\2\0\1\23\3\0\1\30\1\41\30\0\1\25\24\0"+
    "\1\26\1\0\1\42\2\0\1\43\2\0\1\15\7\0"+
    "\1\11\16\0\1\27\17\0\1\13\11\0\1\24\2\0"+
    "\1\26\2\0\1\25\11\0\1\44\4\0\1\15\5\0"+
    "\1\45\4\0\1\34\7\0\1\34\2\0\1\15\2\0"+
    "\1\25\1\0\1\11\1\34\3\0\1\44\4\0\1\30"+
    "\3\0\1\15\1\30\53\0\1\30\2\0\1\24\6\0"+
    "\1\46\1\0\1\47\2\0\1\37\3\0\1\25\15\0"+
    "\1\33\6\0\1\50\4\0\2\13\17\0\1\11\1\33"+
    "\2\0\1\15\1\0\1\33\6\0\1\51\5\0\1\15"+
    "\1\41\2\0\1\41\6\0\1\34\25\0\1\52\1\0"+
    "\1\53\25\0\1\25\1\26\2\0\1\26\7\0\1\24"+
    "\32\0\1\20\21\0\1\25\1\53\1\0\1\54\15\0"+
    "\1\30\3\0\1\47\6\0\1\25\47\0\1\34\4\0"+
    "\1\11\10\0\1\36\17\0\1\26\13\0\1\25\31\0"+
    "\1\51\15\0\1\55\17\0\1\56\2\0\1\57\1\60"+
    "\3\0\1\60\4\0\1\61\1\62\24\0\1\20\7\0"+
    "\1\55\6\0\1\63\5\0\1\53\44\0\1\64\102\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[1402];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\45\0\112\0\157\0\224\0\271\0\336"+
    "\0\u0103\0\u0128\0\u014d\0\u0172\0\u0197\0\u01bc\0\u01e1\0\u0206"+
    "\0\u022b\0\u0250\0\u0275\0\u029a\0\u02bf\0\u02e4\0\u0309\0\u032e"+
    "\0\u0353\0\u0378\0\u039d\0\u03c2\0\45\0\45\0\45\0\u03e7"+
    "\0\u040c\0\u0431\0\u0456\0\u047b\0\u04a0\0\u04c5\0\u04ea\0\u050f"+
    "\0\u0534\0\u0559\0\u057e\0\u05a3\0\u05c8\0\u05ed\0\u0612\0\u0637"+
    "\0\u065c\0\u0681\0\u06a6\0\u06cb\0\u06f0\0\u0715\0\u073a\0\u075f"+
    "\0\u0784\0\u07a9\0\u07ce\0\u07f3\0\u0818\0\u083d\0\u0862\0\u0887"+
    "\0\u08ac\0\u08d1\0\u08f6\0\u091b\0\u0940\0\u0965\0\u098a\0\u09af"+
    "\0\u09d4\0\u09f9\0\u0a1e\0\u0a43\0\u0a68\0\u0a8d\0\u0ab2\0\u0ad7"+
    "\0\u0afc\0\u0b21\0\u0b46\0\u0b6b\0\u0b90\0\u0bb5\0\u0bda\0\45"+
    "\0\u0bff\0\u0c24\0\45\0\u0c49\0\u0c6e\0\u0c93\0\u0cb8\0\u0cdd"+
    "\0\u0d02\0\u0d27\0\u0d4c\0\u0d71\0\u0d96\0\u0dbb\0\u0de0\0\u0e05"+
    "\0\u0e2a\0\u0e4f\0\u0e74\0\u0e99\0\u0ebe\0\u0ee3\0\u0f08\0\u0f2d"+
    "\0\u0f52\0\u0f77\0\u0f9c\0\u0fc1\0\u0fe6\0\u100b\0\u1030\0\u1055"+
    "\0\u107a\0\u109f\0\u10c4\0\u10e9\0\u110e\0\u1133\0\u1158\0\u117d"+
    "\0\u11a2\0\u11c7\0\u11ec\0\u1211\0\u1236\0\u125b\0\u1280\0\u12a5"+
    "\0\u12ca\0\u12ef\0\u1314\0\u1339\0\u135e\0\u1383\0\u13a8\0\u13cd"+
    "\0\u13f2\0\u1417\0\u143c\0\u1461\0\u1486\0\u14ab\0\u14d0\0\u14f5"+
    "\0\u151a\0\u153f\0\u1564\0\u1589\0\u15ae\0\u15d3\0\u15f8\0\u161d"+
    "\0\u1642\0\u1667\0\u168c\0\u16b1\0\u16d6\0\u16fb\0\u1720\0\u1745"+
    "\0\u176a\0\u178f\0\u17b4\0\u17d9\0\u17fe\0\u1823\0\u1848\0\u186d"+
    "\0\u1892\0\u18b7\0\u18dc\0\u1901\0\u1926\0\u194b\0\u1970\0\u1995"+
    "\0\u19ba\0\u19df\0\u1a04\0\u1a29\0\45\0\u1a4e\0\u1a73\0\u1a98"+
    "\0\u1abd\0\u1ae2\0\u1b07\0\u1b2c\0\u1b51\0\u1b76\0\u1b9b\0\u1bc0"+
    "\0\u1be5\0\u1c0a\0\u1c2f\0\u1c54\0\u1c79\0\u1c9e\0\u1cc3\0\u1ce8"+
    "\0\u1d0d\0\u1d32\0\45\0\u1d57\0\u1d7c\0\u1da1\0\u1dc6\0\u1deb"+
    "\0\u1e10\0\u1e35\0\u1e5a\0\u1e7f\0\u1ea4\0\u1ec9\0\u1eee\0\u1f13"+
    "\0\u1f38\0\u1f5d\0\u1f82\0\45\0\u1fa7\0\u1fcc\0\u1ff1\0\45"+
    "\0\u2016\0\u203b\0\u2060\0\u2085\0\u20aa\0\u20cf\0\u20f4\0\u2119"+
    "\0\u213e\0\u2163\0\u2188\0\u21ad\0\u21d2\0\u21f7\0\u221c\0\45"+
    "\0\u2241\0\u2266\0\u228b\0\u22b0\0\u22d5\0\u22fa\0\u231f\0\45"+
    "\0\u2344\0\u2369\0\u238e\0\u23b3\0\u23d8\0\u23fd\0\u2422\0\u2447"+
    "\0\u246c\0\u2491\0\u24b6\0\u24db\0\u2500\0\u2525\0\u254a\0\u256f"+
    "\0\u2594\0\u25b9\0\u25de\0\u2603\0\u2628\0\u264d\0\u2672\0\u2697"+
    "\0\u26bc\0\u26e1\0\u2706\0\u272b\0\u2750\0\u2775\0\u279a\0\u27bf"+
    "\0\u27e4\0\u2809\0\u282e\0\u2853\0\u2878\0\u289d\0\u28c2\0\u28e7"+
    "\0\u290c\0\u2931\0\u2956\0\u297b\0\u29a0\0\u29c5\0\u29ea\0\u2a0f"+
    "\0\u2a34\0\u2a59\0\u2a7e\0\u2aa3\0\u2ac8\0\u2aed\0\u2b12\0\u2b37"+
    "\0\u2b5c\0\u2b81\0\u2ba6\0\u2bcb\0\u2bf0\0\u2c15\0\u2c3a\0\u2c5f"+
    "\0\u2c84\0\u2ca9\0\u2cce\0\u2cf3\0\u2d18\0\u2085\0\u2d3d\0\u2d62"+
    "\0\u2d87\0\u2dac\0\u2dd1\0\u2df6\0\u2e1b\0\u2e40\0\u2e65\0\u2e8a"+
    "\0\u2eaf\0\u2ed4\0\u2ef9\0\u2f1e\0\u2f43\0\45\0\u2f68\0\u2f8d"+
    "\0\45\0\u2fb2\0\u2fd7\0\u2ffc\0\u3021\0\u3046\0\u306b\0\u3090"+
    "\0\u30b5\0\u30da\0\u30ff\0\u3124\0\u3149\0\u316e\0\u3193\0\u31b8"+
    "\0\u31dd\0\u3202\0\u3227\0\u324c\0\u3271\0\u3296\0\u32bb\0\u0afc"+
    "\0\u32e0\0\u3305\0\u332a\0\u334f\0\u3374\0\u3399\0\u33be\0\u33e3"+
    "\0\u3408\0\u342d\0\u3452\0\u3477\0\u349c\0\u34c1\0\u34e6\0\u350b"+
    "\0\u3530\0\u3555\0\u357a\0\u359f\0\u35c4\0\u35e9\0\u360e\0\u3633"+
    "\0\u3658\0\u367d\0\u36a2\0\u36c7\0\u36ec\0\u3711\0\u3736\0\u375b"+
    "\0\u3780\0\u37a5\0\u37ca\0\u37ef\0\u3814\0\u3839\0\u385e\0\u3883"+
    "\0\u38a8\0\u38cd\0\u38f2\0\u3917\0\u393c\0\u3961\0\u3986\0\u39ab"+
    "\0\u39d0\0\u39f5\0\u3a1a\0\u3a3f\0\u3a64\0\u3a89\0\u3aae\0\u3ad3"+
    "\0\u3af8\0\u3b1d\0\u3b42\0\u3b67\0\u3b8c\0\u3bb1\0\u3bd6\0\u3bfb"+
    "\0\u3c20\0\u3c45\0\u3c6a\0\u3c8f\0\u3cb4\0\u3cd9\0\u3cfe\0\u3d23"+
    "\0\u3d48\0\u3d6d\0\u3d92\0\u3db7\0\u3ddc\0\u3e01\0\u3e26\0\u3e4b"+
    "\0\u3e70\0\u3e95\0\u3eba\0\u3edf\0\u3f04\0\45\0\u3f29\0\u3f4e"+
    "\0\u3f73\0\u3f98\0\u3fbd\0\u3fe2\0\u4007\0\u402c\0\u4051\0\u4076"+
    "\0\u409b\0\u40c0\0\u40e5\0\u410a\0\u412f\0\u4154\0\u4179\0\u419e"+
    "\0\u41c3\0\u41e8\0\u420d\0\u4232\0\u4257\0\u427c\0\u42a1\0\u42c6"+
    "\0\u42eb\0\u4310\0\u4335\0\u435a\0\u437f\0\u43a4\0\u43c9\0\u43ee"+
    "\0\u4413\0\u4438\0\u445d\0\u4482\0\u44a7\0\u44cc\0\u44f1\0\u4516"+
    "\0\u453b\0\u4560\0\u4585\0\u45aa\0\u45cf\0\u2628\0\u45f4\0\u4619"+
    "\0\u463e\0\u4663\0\u4688\0\u46ad\0\u46d2\0\u46f7\0\u471c\0\u4741"+
    "\0\u4766\0\u478b\0\u47b0\0\u47d5\0\u47fa\0\u481f\0\u4844\0\u4869"+
    "\0\u488e\0\u48b3\0\u48d8\0\u3bfb\0\u48fd\0\u4922\0\u4947\0\u496c"+
    "\0\u4991\0\u49b6\0\u49db\0\u2b12\0\u4a00\0\u4a25\0\u4a4a\0\u4a6f"+
    "\0\45\0\u4a94\0\u4ab9\0\u4ade\0\u4b03\0\u4b28\0\u4b4d\0\u4b72"+
    "\0\u4b97\0\u4bbc\0\u4be1\0\45\0\u4c06\0\u4c2b\0\u4c50\0\u4c75"+
    "\0\u4c9a\0\u4cbf\0\u4c2b\0\u4ce4\0\u4d09\0\u4d2e\0\u4d53\0\u4d78"+
    "\0\45\0\u4d9d\0\u4dc2\0\u4de7\0\u4e0c\0\u4e31\0\u4e56\0\u4e7b"+
    "\0\u4ea0\0\u4ec5\0\u4eea\0\u4f0f\0\u4f34\0\u4f59\0\u4f7e\0\u4fa3"+
    "\0\u4fc8\0\u4fed\0\u5012\0\u5037\0\u505c\0\u5081\0\u50a6\0\u50cb"+
    "\0\u50f0\0\u5115\0\u1ce8\0\u513a\0\u515f\0\u5184\0\u51a9\0\u51ce"+
    "\0\u51f3\0\u5218\0\u523d\0\u5262\0\u5287\0\u52ac\0\u2dd1\0\u52d1"+
    "\0\u52f6\0\u531b\0\u5340\0\u5365\0\u538a\0\u53af\0\u53d4\0\u53f9"+
    "\0\u541e\0\u5443\0\u5468\0\u548d\0\u54b2\0\u54d7\0\u54fc\0\u5521"+
    "\0\u402c\0\u5546\0\45\0\u556b\0\u5590\0\u55b5\0\u55da\0\u55ff"+
    "\0\u5624\0\u5649\0\u566e\0\u5693\0\u56b8\0\u56dd\0\u5702\0\u5727"+
    "\0\u574c\0\u5771\0\u5796\0\u57bb\0\u57e0\0\u5805\0\u582a\0\u584f"+
    "\0\u5874\0\u5899\0\u58be\0\u58e3\0\u5908\0\u592d\0\u5952\0\u5977"+
    "\0\u599c\0\u59c1\0\u3a3f\0\u59e6\0\u5a0b\0\u5a30\0\u5a55\0\u5a7a"+
    "\0\u5a9f\0\u5ac4\0\u5ae9\0\u5b0e\0\u5b33\0\u5b58\0\u5b7d\0\u3736"+
    "\0\u5ba2\0\u5bc7\0\45\0\u2bcb\0\u5bec\0\u5c11\0\u1e5a\0\u5c36"+
    "\0\u5c5b\0\u5c80\0\u5ca5\0\u5cca\0\u5cef\0\u5d14\0\u19ba\0\u5d39"+
    "\0\u5d5e\0\u5d83\0\u5da8\0\u5dcd\0\u5df2\0\u5e17\0\u5e3c\0\u5e61"+
    "\0\u5e86\0\u5eab\0\u5ed0\0\u5ef5\0\u5f1a\0\u5f3f\0\u5f64\0\u5f89"+
    "\0\u2085\0\u5fae\0\u5fd3\0\u5ff8\0\u601d\0\u6042\0\u6067\0\u608c"+
    "\0\u60b1\0\u60d6\0\u60fb\0\u6120\0\u6145\0\u616a\0\u618f\0\u61b4"+
    "\0\u61d9\0\u61fe\0\u6223\0\u6248\0\u626d\0\u6292\0\u62b7\0\45"+
    "\0\u1ce8\0\u62dc\0\45\0\u6301\0\u6326\0\u634b\0\u6370\0\u6395"+
    "\0\u63ba\0\u63df\0\u6404\0\u6429\0\u644e\0\u6473\0\u6498\0\u64bd"+
    "\0\u64e2\0\u6507\0\u652c\0\u6551\0\u6576\0\u659b\0\u65c0\0\u65e5"+
    "\0\u660a\0\u662f\0\u6654\0\u6679\0\u669e\0\u66c3\0\u66e8\0\u670d"+
    "\0\u6732\0\u6757\0\u677c\0\u67a1\0\u67c6\0\u67eb\0\u6810\0\u6835"+
    "\0\u685a\0\u687f\0\u68a4\0\u68c9\0\45\0\u68ee\0\u6913\0\u6938"+
    "\0\u695d\0\u6982\0\u69a7\0\u69cc\0\u69f1\0\u6a16\0\u6a3b\0\u6a60"+
    "\0\u6a85\0\u6aaa\0\u6acf\0\u6af4\0\u6aaa\0\u6b19\0\u6b3e\0\u6b63"+
    "\0\u6b88\0\u6bad\0\u6bd2\0\u6bf7\0\u6c1c\0\u6c41\0\45\0\u6c66"+
    "\0\u6c8b\0\u6cb0\0\u6cd5\0\u6cfa\0\u6d1f\0\u6d44\0\u6d69\0\u6d8e"+
    "\0\u6db3\0\45\0\u6dd8\0\u6dfd\0\u6e22\0\u6e47\0\45\0\u6e6c"+
    "\0\u6e91\0\u6eb6\0\u6edb\0\u6f00\0\u6f25\0\u6f4a\0\u6f6f\0\u6f94"+
    "\0\u6fb9\0\u6fde\0\u7003\0\u7028\0\u704d\0\u7072\0\u6a60\0\u7097"+
    "\0\u70bc\0\u70e1\0\u7106\0\u712b\0\u7150\0\u7175\0\u719a\0\u71bf"+
    "\0\u71e4\0\u7209\0\u722e\0\u7253\0\45\0\u7278\0\u729d\0\u72c2"+
    "\0\u2bf0\0\u72e7\0\u730c\0\u7331\0\u7356\0\u737b\0\u73a0\0\u73c5"+
    "\0\u73ea\0\u740f\0\u7434\0\u7459\0\u747e\0\u74a3\0\u74c8\0\u74ed"+
    "\0\u7512\0\u7537\0\u755c\0\u7581\0\u75a6\0\u75cb\0\u75f0\0\u7615"+
    "\0\u763a\0\u765f\0\u7684\0\u76a9\0\u76ce\0\u76f3\0\u7718\0\u773d"+
    "\0\u7762\0\u7787\0\u77ac\0\u77d1\0\u77f6\0\u781b\0\u7840\0\u7865"+
    "\0\u788a\0\u19ba\0\u78af\0\u78d4\0\u78f9\0\u791e\0\u7943\0\u7968"+
    "\0\u798d\0\u79b2\0\u79d7\0\45\0\u79fc\0\u7a21\0\u7a46\0\u7a6b"+
    "\0\u7a90\0\u7ab5\0\u7ada\0\u7aff\0\u4c06\0\u7b24\0\u7b49\0\u7b6e"+
    "\0\u7b93\0\u7bb8\0\u7bdd\0\u7c02\0\u7c27\0\u7c4c\0\u7c71\0\u7c96"+
    "\0\u7cbb\0\u7ce0\0\u7d05\0\u7d2a\0\u7d4f\0\u7d74\0\u7d99\0\u7dbe"+
    "\0\u7de3\0\45\0\u7e08\0\u7e2d\0\u7e52\0\u7e77\0\u7e9c\0\u7ec1"+
    "\0\u7ee6\0\u7f0b\0\u7f30\0\u7f55\0\u7f7a\0\u7f9f\0\u7fc4\0\u7fe9"+
    "\0\u800e\0\u8033\0\u8058\0\u807d\0\u80a2\0\u80c7\0\u80ec\0\u8111"+
    "\0\u8136\0\u815b\0\u8180\0\u81a5\0\u81ca\0\u5874\0\u81ef\0\u8214"+
    "\0\u8239\0\u825e\0\u8283\0\u82a8\0\45\0\u82cd\0\u82f2\0\u8317"+
    "\0\u833c\0\u8361\0\u8386\0\u83ab\0\u83d0\0\u83f5\0\45\0\u841a"+
    "\0\u843f\0\u8464\0\u8489\0\u84ae\0\u84d3\0\u6e47\0\u84f8\0\u851d"+
    "\0\u8542\0\u8567\0\u858c\0\u85b1\0\u85d6\0\u85fb\0\u8620\0\u8645"+
    "\0\u866a\0\u868f\0\u86b4\0\u86d9\0\u6cfa\0\u86fe\0\u8723\0\u8748"+
    "\0\u876d\0\u8792\0\u87b7\0\45\0\u87dc\0\45\0\u8801\0\u8826"+
    "\0\u884b\0\u8870\0\u8895\0\u88ba\0\u88df\0\u8904\0\u8929\0\u894e"+
    "\0\u8973\0\u8998\0\u89bd\0\u89e2\0\u8a07\0\u8a2c\0\u8a51\0\u8a76"+
    "\0\u8a9b\0\u8ac0\0\u8ae5\0\u8b0a\0\u8b2f\0\u8b54\0\u8b79\0\u8b9e"+
    "\0\u8bc3\0\u8be8\0\u8c0d\0\u8c32\0\u8c57\0\u8c7c\0\u8ca1\0\u8cc6"+
    "\0\u8ceb\0\u8d10\0\u8d35\0\u8d5a\0\u8d7f\0\u8da4\0\u8dc9\0\u8dee"+
    "\0\u8e13\0\u8e38\0\u8e5d\0\u8e82\0\u8ea7\0\u8ecc\0\u8ef1\0\u8f16"+
    "\0\u8f3b\0\u8f60\0\u8f85\0\u8faa\0\u8fcf\0\u8ff4\0\u9019\0\u903e"+
    "\0\u9063\0\u9088\0\u712b\0\u90ad\0\u90d2\0\u90f7\0\u911c\0\u9141"+
    "\0\u9166\0\u918b\0\u91b0\0\u91d5\0\u91fa\0\u921f\0\u9244\0\u9269"+
    "\0\u928e\0\u92b3\0\u92d8\0\u92fd\0\u9322\0\u9347\0\u936c\0\45"+
    "\0\u9391\0\u93b6\0\u93db\0\u9400\0\u9322\0\u9425\0\u944a\0\u946f"+
    "\0\u9494\0\u94b9\0\u94de\0\u9503\0\u9528\0\u954d\0\u9572\0\u9597"+
    "\0\u95bc\0\45\0\u95e1\0\u9606\0\u962b\0\u9650\0\u9675\0\u969a"+
    "\0\u96bf\0\u96e4\0\u9709\0\u972e\0\u9753\0\u9778\0\u979d\0\u97c2"+
    "\0\u97e7\0\u980c\0\u9831\0\u9856\0\u987b\0\u98a0\0\u98c5\0\u98ea"+
    "\0\u990f\0\u9934\0\u9959\0\u997e\0\u99a3\0\u99c8\0\u99ed\0\u9a12"+
    "\0\u9a37\0\u9a5c\0\u9a81\0\u9aa6\0\u9acb\0\u9af0\0\u9b15\0\u9b3a"+
    "\0\u9b5f\0\u9b84\0\u9ba9\0\u9bce\0\u9bf3\0\u9c18\0\u9c3d\0\u9c62"+
    "\0\u841a\0\u9c87\0\u9cac\0\u9cd1\0\u9cf6\0\u9d1b\0\u954d\0\u9d40"+
    "\0\u78f9\0\u9d65\0\u9d8a\0\u9daf\0\u9dd4\0\u9df9\0\45\0\u9e1e"+
    "\0\u9e43\0\u9e68\0\u9e8d\0\u9eb2\0\u9ed7\0\u9efc\0\u9f21\0\u9f46"+
    "\0\u9f6b\0\u9f90\0\u9fb5\0\u9fda\0\u9fff\0\ua024\0\ua049\0\ua06e"+
    "\0\ua093\0\ua0b8\0\ua0dd\0\ua102\0\ua127\0\ua14c\0\ua171\0\ua196"+
    "\0\ua1bb\0\ua1e0\0\ua205\0\ua22a\0\ua24f\0\ua274\0\ua299\0\ua2be"+
    "\0\ua2e3\0\ua308\0\ua32d\0\ua352\0\ua377\0\ua39c\0\ua3c1\0\ua3e6"+
    "\0\ua40b\0\ua430\0\ua455\0\ua47a\0\ua49f\0\ua4c4\0\ua4e9\0\ua50e"+
    "\0\ua533\0\ua558\0\ua57d\0\ua205\0\u2bf0\0\ua5a2\0\ua5c7\0\ua5ec"+
    "\0\ua611\0\ua636\0\ua65b\0\ua680\0\ua6a5\0\ua6ca\0\ua6ef\0\ua714"+
    "\0\ua739\0\ua75e\0\u81a5\0\ua783\0\ua7a8\0\ua7cd\0\ua7f2\0\ua817"+
    "\0\ua83c\0\ua861\0\ua886\0\ua8ab\0\ua8d0\0\ua8f5\0\ua91a\0\ua93f"+
    "\0\ua964\0\ua989\0\45\0\ua9ae\0\ua9d3\0\45\0\ua9f8\0\uaa1d"+
    "\0\uaa42\0\uaa67\0\45\0\uaa8c\0\uaab1\0\uaad6\0\uaafb\0\45"+
    "\0\45\0\uab20\0\uab45\0\uab6a\0\uab8f\0\uabb4\0\uabd9\0\uabfe"+
    "\0\uac23\0\uac48\0\uac6d\0\uac92\0\uacb7\0\uacdc\0\uad01\0\uad26"+
    "\0\uad4b\0\uad70\0\uad95\0\uadba\0\uaddf\0\45\0\uae04\0\uae29"+
    "\0\uae4e\0\uae73\0\uae98\0\uaebd\0\uaee2\0\45\0\uaf07\0\uaf2c"+
    "\0\uaf51\0\uaf76\0\uaf9b\0\uafc0\0\45\0\uafe5\0\ub00a\0\ub02f"+
    "\0\ub054\0\ub079\0\ub09e\0\ub0c3\0\u81a5\0\ub0e8\0\ub10d\0\ub132"+
    "\0\ub157\0\ub17c\0\ub1a1\0\ub1c6\0\ub1eb\0\ub210\0\ub235\0\ub25a"+
    "\0\ub27f\0\ub2a4\0\ub2c9\0\ub2ee\0\ub313\0\ub338\0\ub35d\0\ub382"+
    "\0\ub3a7\0\ub3cc\0\ub3f1\0\ub416\0\ub43b\0\ub460\0\ub485\0\ub4aa"+
    "\0\ub4cf\0\ub4f4\0\ub519\0\ub53e\0\ub563\0\ub588\0\ub5ad\0\45"+
    "\0\ub5d2\0\ub5f7\0\ub61c\0\ub641\0\ub666\0\ub68b\0\ub6b0\0\ub6d5"+
    "\0\ub6fa\0\ub71f\0\ub744\0\ub769\0\ub78e\0\ub7b3\0\ub7d8\0\ub7fd"+
    "\0\ub822\0\ub847\0\ub86c\0\ub891\0\ub8b6\0\ub8db\0\ub900\0\ub925"+
    "\0\ub94a\0\ub96f\0\ub994\0\ub9b9\0\ub9de\0\uba03\0\uba28\0\uba4d"+
    "\0\uba72\0\uba97\0\ubabc\0\ubae1\0\ubb06\0\ubb2b\0\ubb50\0\ubb75"+
    "\0\ubb9a\0\ubbbf\0\ubbe4\0\ubc09\0\ubc2e\0\ubc53\0\ubc78\0\ubc9d"+
    "\0\ubcc2\0\ubce7\0\ubd0c\0\ubd31\0\ubd56\0\ubd7b\0\ubda0\0\ubdc5"+
    "\0\ubdea\0\ube0f\0\ube34\0\ube59\0\ube7e\0\ubea3\0\ubec8\0\ubeed"+
    "\0\ubf12\0\ubf37";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1402];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\4\2\1\34\1\2\1\35\2\2\1\36"+
    "\1\37\50\0\1\40\1\0\1\41\1\42\1\43\1\0"+
    "\1\44\1\0\1\45\1\46\5\0\1\47\24\0\1\50"+
    "\1\0\1\51\1\0\1\52\1\0\1\53\1\54\1\55"+
    "\1\56\2\0\1\57\1\60\1\61\1\62\1\0\1\63"+
    "\1\64\1\65\1\66\1\67\20\0\1\70\1\0\1\71"+
    "\1\72\2\0\1\73\2\0\1\74\3\0\1\75\5\0"+
    "\1\76\21\0\1\77\5\0\1\100\1\0\1\101\3\0"+
    "\1\102\2\0\1\103\1\0\1\104\3\0\1\105\6\0"+
    "\1\106\10\0\1\107\1\0\1\110\3\0\1\111\2\0"+
    "\1\112\5\0\1\113\27\0\1\114\6\0\1\115\33\0"+
    "\1\116\1\0\1\117\1\120\1\121\1\0\1\122\2\0"+
    "\1\123\5\0\1\124\26\0\1\125\1\0\1\126\4\0"+
    "\1\127\2\0\1\130\1\131\4\0\1\132\1\133\22\0"+
    "\1\134\1\0\1\135\1\136\1\137\1\0\1\140\1\0"+
    "\1\141\1\142\3\0\1\143\1\0\1\144\25\0\1\145"+
    "\1\0\1\146\3\0\1\147\2\0\1\150\32\0\1\151"+
    "\1\0\1\152\1\0\1\153\3\0\1\154\1\155\2\0"+
    "\1\156\1\157\2\0\1\160\4\0\1\161\1\162\21\0"+
    "\1\163\3\0\1\164\36\0\1\165\1\0\1\166\1\167"+
    "\2\0\1\170\1\0\1\171\1\172\5\0\1\173\25\0"+
    "\1\174\1\0\1\175\3\0\1\176\2\0\1\177\33\0"+
    "\1\200\1\0\1\201\3\0\1\202\2\0\1\203\5\0"+
    "\1\204\47\0\1\205\36\0\1\206\3\0\1\207\1\0"+
    "\1\210\1\0\1\211\20\0\1\212\1\0\1\213\1\214"+
    "\2\0\1\215\1\0\1\216\1\217\5\0\1\220\25\0"+
    "\1\221\1\0\1\222\1\0\1\223\1\0\1\224\2\0"+
    "\1\225\5\0\1\226\25\0\1\227\1\230\1\231\3\0"+
    "\1\232\1\233\1\234\1\235\1\236\2\0\1\237\1\0"+
    "\1\240\1\0\1\241\2\0\1\242\20\0\1\243\1\0"+
    "\1\244\1\245\2\0\1\246\2\0\1\247\3\0\1\250"+
    "\27\0\1\251\1\0\1\252\1\253\2\0\1\254\1\0"+
    "\1\255\1\256\3\0\1\257\1\0\1\260\27\0\1\261"+
    "\3\0\1\262\40\0\1\263\6\0\1\264\5\0\1\265"+
    "\44\0\1\266\26\0\1\267\1\0\1\270\1\0\1\271"+
    "\1\0\1\272\35\0\1\273\1\274\1\275\1\0\1\276"+
    "\1\275\1\277\1\300\1\301\2\0\1\302\1\303\1\304"+
    "\2\0\1\305\1\0\1\306\22\0\1\307\1\0\1\310"+
    "\3\0\1\311\2\0\1\312\5\0\1\313\30\0\1\314"+
    "\12\0\1\315\27\0\1\316\1\0\1\317\1\0\1\320"+
    "\1\0\1\321\4\0\1\322\3\0\1\323\24\0\1\324"+
    "\1\0\1\325\6\0\1\326\5\0\1\327\26\0\1\330"+
    "\1\0\1\331\1\332\4\0\1\333\5\0\1\334\26\0"+
    "\1\335\1\0\1\336\1\320\1\0\1\337\1\0\1\340"+
    "\11\0\1\275\25\0\1\341\5\0\1\342\34\0\1\343"+
    "\1\344\6\0\1\345\3\0\1\346\1\347\30\0\1\350"+
    "\1\351\2\0\1\352\2\0\1\353\40\0\1\354\3\0"+
    "\1\355\7\0\1\356\26\0\1\275\42\0\1\354\1\0"+
    "\1\357\3\0\1\360\40\0\1\361\2\0\1\307\1\0"+
    "\1\362\1\363\7\0\1\364\24\0\1\365\1\0\1\366"+
    "\45\0\1\367\1\370\12\0\1\371\1\0\1\372\24\0"+
    "\1\373\52\0\1\374\2\0\1\375\31\0\1\376\2\0"+
    "\1\377\5\0\1\u0100\35\0\1\u0101\3\0\1\u0102\2\0"+
    "\1\u0103\34\0\1\u0104\4\0\1\u0105\1\0\1\u0106\1\0"+
    "\1\354\3\0\1\u0107\26\0\1\u0108\10\0\1\u0109\57\0"+
    "\1\u010a\17\0\1\u010b\10\0\1\u010c\34\0\1\u010d\13\0"+
    "\1\u010e\30\0\1\u010f\3\0\1\354\42\0\1\275\1\u0110"+
    "\10\0\1\u0111\3\0\1\u0112\31\0\1\u0113\2\0\1\u0114"+
    "\1\u0115\5\0\1\u0116\1\0\1\u0117\1\0\1\u0118\21\0"+
    "\1\u0119\1\0\1\u011a\1\u011b\2\0\1\u011c\2\0\1\u011d"+
    "\35\0\1\u011e\6\0\1\u011f\34\0\1\320\1\0\1\u0120"+
    "\16\0\1\u0121\23\0\1\u0122\16\0\1\u0123\26\0\1\u0124"+
    "\43\0\1\u0125\1\u0126\6\0\1\u0127\14\0\1\u0128\21\0"+
    "\1\u0129\40\0\1\u012a\47\0\1\u012b\42\0\1\u012c\6\0"+
    "\1\u012d\14\0\1\u012e\21\0\1\u012f\4\0\1\u0130\37\0"+
    "\1\u0131\3\0\1\323\1\0\1\u0132\11\0\1\u0133\1\u0134"+
    "\1\0\1\u0135\6\0\1\u0136\25\0\1\u0137\3\0\1\u0138"+
    "\24\0\1\317\16\0\1\u0139\32\0\1\327\37\0\1\54"+
    "\1\u0100\6\0\1\u013a\11\0\1\u013b\41\0\1\u013c\31\0"+
    "\1\u013d\7\0\1\u013e\30\0\1\u013f\1\u0140\1\u0141\4\0"+
    "\1\u0142\12\0\1\u0143\22\0\1\u0144\1\0\1\u0145\1\0"+
    "\1\u0146\1\0\1\u0147\2\0\1\u0148\5\0\1\u0149\33\0"+
    "\1\u014a\40\0\1\u014b\1\u014c\1\0\1\344\12\0\1\u014d"+
    "\1\0\1\u014e\24\0\1\u014f\3\0\1\u0150\10\0\1\u0151"+
    "\1\275\2\0\1\u0152\23\0\1\u0153\1\u0154\14\0\1\344"+
    "\42\0\1\u0155\3\0\1\u0156\13\0\1\u0157\11\0\1\u0158"+
    "\51\0\1\u0159\34\0\1\u015a\1\u015b\3\0\1\u015c\1\0"+
    "\1\u015d\3\0\1\u015e\2\0\1\u015f\3\0\1\u0160\2\0"+
    "\1\u0161\17\0\1\u0162\23\0\1\u0163\21\0\1\u0164\1\0"+
    "\1\u0165\4\0\1\u0166\3\0\1\u0167\2\0\1\u0168\1\0"+
    "\1\u0169\1\u016a\25\0\1\u016b\4\0\1\u016c\3\0\1\u016d"+
    "\30\0\1\u016e\1\0\1\u016f\1\0\1\u0170\1\0\1\u0171"+
    "\2\0\1\u0172\42\0\1\u0173\36\0\1\u0174\43\0\1\u0175"+
    "\1\0\1\u0176\3\0\1\311\2\0\1\u0177\5\0\1\u0178"+
    "\35\0\1\155\1\u010c\2\0\1\u0179\2\0\1\u017a\1\0"+
    "\1\u017b\1\u016a\1\u017c\1\u017d\1\u017e\17\0\1\u017f\10\0"+
    "\1\u0180\5\0\1\u0181\26\0\1\320\1\0\1\u0182\42\0"+
    "\1\u0183\15\0\1\u0184\2\0\1\u0185\7\0\1\u0111\12\0"+
    "\1\u0186\1\u0187\20\0\1\u0188\23\0\1\u0189\7\0\1\u0118"+
    "\1\u018a\5\0\1\u018b\1\0\1\u018c\2\0\1\210\5\0"+
    "\1\u018d\12\0\1\u018e\7\0\1\u018f\11\0\1\323\1\0"+
    "\1\u0190\44\0\1\u0191\34\0\1\u0192\27\0\1\u0193\4\0"+
    "\1\u0194\10\0\1\u0195\1\0\1\u0196\26\0\1\u0197\47\0"+
    "\1\323\52\0\1\u0194\2\0\1\u0198\30\0\1\u0199\13\0"+
    "\1\u019a\27\0\1\u019b\1\0\1\u0156\42\0\1\u019c\1\u019d"+
    "\21\0\1\u019e\22\0\1\u019f\46\0\1\u01a0\50\0\1\u01a1"+
    "\11\0\1\u01a2\23\0\1\u01a3\1\0\1\u01a4\2\0\1\u01a5"+
    "\1\u01a6\1\u01a7\11\0\1\u01a8\24\0\1\u01a9\2\0\1\344"+
    "\2\0\1\u01aa\12\0\1\u0159\23\0\1\u01ab\3\0\1\u01ac"+
    "\2\0\1\u01ad\35\0\1\u01ae\1\u01af\7\0\1\u01b0\1\u01b1"+
    "\3\0\1\u01b2\4\0\1\u01b3\6\0\1\354\12\0\1\u01b4"+
    "\1\0\1\320\4\0\1\u01b5\36\0\1\u01b6\4\0\1\u01b7"+
    "\1\u01b8\5\0\1\u01b9\26\0\1\u01ba\6\0\1\u01bb\35\0"+
    "\1\u01bc\43\0\1\u01bd\1\0\1\u01be\3\0\1\u01bf\1\u01c0"+
    "\13\0\1\u01c1\1\0\1\u01c2\6\0\1\u01c3\17\0\1\327"+
    "\4\0\1\u01c4\31\0\1\u01c5\1\0\1\u01c6\10\0\1\u01c7"+
    "\1\0\1\u01c8\4\0\1\u01c9\22\0\1\210\1\0\1\u01ca"+
    "\10\0\1\317\5\0\1\u01cb\1\0\1\u01cc\20\0\1\u01cd"+
    "\2\0\1\u01ce\4\0\1\u01cf\54\0\1\u01d0\1\0\1\u0156"+
    "\23\0\1\323\1\0\1\u01d1\10\0\1\u01d2\2\0\1\u01d3"+
    "\1\0\1\u01a6\1\0\1\u01d4\1\210\34\0\1\u01d5\3\0"+
    "\1\327\32\0\1\u01d6\36\0\1\u01d7\4\0\1\u01d8\47\0"+
    "\1\u0111\36\0\1\u014b\3\0\1\u014a\43\0\1\u01d9\10\0"+
    "\1\u01da\53\0\1\331\20\0\1\320\12\0\1\u01db\30\0"+
    "\1\u01dc\1\0\1\u01dd\6\0\1\u01de\5\0\1\u01df\30\0"+
    "\1\u01e0\21\0\1\u01e1\17\0\1\u01e2\10\0\1\u01e3\34\0"+
    "\1\344\4\0\1\u01e4\2\0\1\u01e5\33\0\1\u01e6\1\0"+
    "\1\u01e7\3\0\1\u01e8\41\0\1\u01e9\1\u01ea\7\0\1\u01eb"+
    "\30\0\1\u01ec\13\0\1\u01ed\4\0\1\u01ee\37\0\1\u01ef"+
    "\40\0\1\u01f0\3\0\1\u01f1\5\0\1\u01a2\23\0\1\u01f2"+
    "\1\0\1\u01f3\1\0\1\u01f4\6\0\1\u01f5\2\0\1\u01f6"+
    "\5\0\1\u01f7\26\0\1\u01f8\12\0\1\u01f9\27\0\1\u01fa"+
    "\6\0\1\327\30\0\1\u01fb\2\0\1\u01fc\2\0\1\u01fd"+
    "\2\0\1\u01fe\5\0\1\u01ff\25\0\1\u0200\6\0\1\u0201"+
    "\1\u0202\3\0\1\u0203\7\0\1\u0204\1\u0205\24\0\1\u0206"+
    "\1\0\1\u0207\4\0\1\u0208\3\0\1\u0209\1\u020a\1\u020b"+
    "\11\0\1\u020c\10\0\1\u020d\52\0\1\u020e\2\0\1\u020f"+
    "\32\0\1\u0210\7\0\1\333\1\u0211\1\u0212\1\0\1\u0213"+
    "\1\u0214\1\0\1\u0215\1\u0216\1\0\1\u0217\27\0\1\275"+
    "\1\0\1\u0218\40\0\1\u0219\3\0\1\u021a\2\0\1\u021b"+
    "\36\0\1\u021c\3\0\1\u01f8\14\0\1\u021d\20\0\1\u021e"+
    "\5\0\1\u021f\2\0\1\u0220\41\0\1\u0221\37\0\1\u0222"+
    "\1\0\1\u0223\1\u0224\1\0\1\u0225\1\0\1\u018f\3\0"+
    "\1\u0225\5\0\1\u0226\23\0\1\323\1\333\1\u0227\4\0"+
    "\1\127\3\0\1\u0228\41\0\1\u0229\43\0\1\u022a\3\0"+
    "\1\u01a6\5\0\1\u022b\25\0\1\u022c\10\0\1\u022d\4\0"+
    "\1\u022e\23\0\1\u022f\1\0\1\u0230\1\0\1\u0231\1\0"+
    "\1\u0232\2\0\1\u0233\37\0\1\354\1\0\1\u0234\1\333"+
    "\35\0\1\u0235\2\0\1\u0236\10\0\1\u0237\5\0\1\u0238"+
    "\22\0\1\u0239\1\0\1\u023a\6\0\1\u023b\42\0\1\u023c"+
    "\4\0\1\u023d\30\0\1\u023e\1\0\1\u023f\43\0\1\u0240"+
    "\54\0\1\u0241\36\0\1\u0242\44\0\1\u0243\46\0\1\u0244"+
    "\14\0\1\356\22\0\1\u0245\52\0\1\u0209\57\0\1\u01cf"+
    "\1\u0246\22\0\1\u0247\45\0\1\u0248\46\0\1\u0154\51\0"+
    "\1\u0249\46\0\1\u024a\33\0\1\320\1\0\1\u024b\13\0"+
    "\1\u024c\33\0\1\u0150\14\0\1\u024d\32\0\1\u024e\47\0"+
    "\1\u024f\30\0\1\u0250\10\0\1\u0251\41\0\1\u0252\2\0"+
    "\1\u0253\44\0\1\u0254\34\0\1\344\1\u0255\2\0\1\320"+
    "\45\0\1\u024e\36\0\1\u0256\1\0\1\u0257\3\0\1\u0258"+
    "\44\0\1\u0259\63\0\1\327\17\0\1\u025a\1\0\1\322"+
    "\2\0\1\344\53\0\1\u025b\31\0\1\u025c\10\0\1\331"+
    "\4\0\1\u0168\3\0\1\u025d\43\0\1\u022b\33\0\1\u0118"+
    "\54\0\1\u025e\25\0\1\320\47\0\1\275\45\0\1\u0150"+
    "\42\0\1\u025f\45\0\1\320\46\0\1\u0207\37\0\1\322"+
    "\2\0\1\344\15\0\1\344\44\0\1\320\23\0\1\323"+
    "\43\0\1\u010b\13\0\1\u0159\31\0\1\344\55\0\1\u0260"+
    "\43\0\1\275\46\0\1\u0261\3\0\1\u0262\42\0\1\u0263"+
    "\42\0\1\u0264\5\0\1\u016a\32\0\1\u0265\33\0\1\275"+
    "\56\0\1\u0266\33\0\1\u0267\16\0\1\u0268\5\0\1\u0269"+
    "\22\0\1\u026a\65\0\1\u026b\43\0\1\u026c\22\0\1\u026d"+
    "\22\0\1\u026e\26\0\1\u026f\60\0\1\u01e1\41\0\1\u024e"+
    "\2\0\1\331\24\0\1\u0257\3\0\1\u014a\41\0\1\u0270"+
    "\47\0\1\u0225\47\0\1\u0271\35\0\1\u0272\6\0\1\u0273"+
    "\35\0\1\u0274\53\0\1\u0275\4\0\1\u0276\42\0\1\u0277"+
    "\41\0\1\u0278\35\0\1\u0279\50\0\1\u027a\57\0\1\u027b"+
    "\26\0\1\u0111\64\0\1\u0194\21\0\1\u027c\52\0\1\u027d"+
    "\2\0\1\u027e\35\0\1\u027f\50\0\1\u0280\40\0\1\u018a"+
    "\45\0\1\366\46\0\1\u0281\53\0\1\u0282\33\0\1\306"+
    "\41\0\1\275\4\0\1\u0283\41\0\1\u0284\45\0\1\u0285"+
    "\4\0\1\u0286\1\u0287\1\0\1\u0288\6\0\1\u0289\1\u028a"+
    "\25\0\1\u028b\5\0\1\u028c\44\0\1\331\34\0\1\u028d"+
    "\5\0\1\u01a6\44\0\1\u01a6\44\0\1\323\1\0\1\354"+
    "\41\0\1\u028e\36\0\1\u028f\14\0\1\u0290\42\0\1\u0291"+
    "\10\0\1\u0292\21\0\1\155\46\0\1\323\42\0\1\54"+
    "\42\0\1\u0293\46\0\1\u0294\43\0\1\u0295\52\0\1\u022b"+
    "\35\0\1\u0241\10\0\1\u0296\47\0\1\275\31\0\1\u0297"+
    "\12\0\1\u0298\30\0\1\u0299\1\0\1\u01f6\1\u029a\1\u029b"+
    "\1\0\1\u029c\5\0\1\u0100\5\0\1\u029d\24\0\1\u01b3"+
    "\45\0\1\u029e\3\0\1\u0207\4\0\1\u029f\5\0\1\u02a0"+
    "\44\0\1\u02a1\32\0\1\u02a2\3\0\1\u02a3\46\0\1\u02a4"+
    "\36\0\1\u02a5\13\0\1\u02a6\26\0\1\u02a7\53\0\1\u02a8"+
    "\44\0\1\u02a9\47\0\1\u02aa\4\0\1\u02ab\25\0\1\u02ac"+
    "\41\0\1\u02ad\60\0\1\u02ae\36\0\1\u02af\44\0\1\u02b0"+
    "\33\0\1\u02b1\47\0\1\u0100\10\0\1\u02b2\37\0\1\u02b3"+
    "\35\0\1\u02b4\1\0\1\u02b5\5\0\1\u02b6\44\0\1\u02b7"+
    "\51\0\1\u02b8\43\0\1\u02b9\47\0\1\u0186\27\0\1\u02ba"+
    "\3\0\1\u0252\40\0\1\u02bb\3\0\1\u02bc\62\0\1\u02bd"+
    "\22\0\1\u02be\6\0\1\u01fb\52\0\1\u02bf\45\0\1\275"+
    "\41\0\1\u02c0\47\0\1\u02c1\34\0\1\u02c2\35\0\1\u02c3"+
    "\46\0\1\u0156\63\0\1\275\30\0\1\u02c4\1\210\42\0"+
    "\1\323\2\0\1\u0264\36\0\1\u02c5\66\0\1\323\26\0"+
    "\1\u02c6\2\0\1\u02c7\34\0\1\u02c8\10\0\1\275\11\0"+
    "\1\u02c9\34\0\1\u02ca\6\0\1\320\21\0\1\u02cb\21\0"+
    "\1\u02cc\1\344\35\0\1\u02cd\10\0\1\u01e1\43\0\1\u02ce"+
    "\1\331\33\0\1\u0207\44\0\1\u02cf\35\0\1\u02d0\40\0"+
    "\1\u0111\63\0\1\u02d1\36\0\1\275\2\0\1\u02d2\51\0"+
    "\1\u02d3\36\0\1\u02d4\50\0\1\u02d5\40\0\1\u02d6\46\0"+
    "\1\u02d7\34\0\1\u02d8\35\0\1\u02d9\67\0\1\u02da\24\0"+
    "\1\u02db\43\0\1\u02dc\45\0\1\u02dd\6\0\1\u02de\35\0"+
    "\1\u02df\6\0\1\u02e0\36\0\1\u02e1\52\0\1\u02e2\33\0"+
    "\1\u02e3\1\u02e4\11\0\1\u02e5\37\0\1\u02e6\40\0\1\u02e7"+
    "\3\0\1\u02e8\56\0\1\u02e9\27\0\1\u02ea\50\0\1\u02eb"+
    "\37\0\1\u02ec\52\0\1\354\10\0\1\323\32\0\1\u0292"+
    "\55\0\1\u0262\26\0\1\u02ed\43\0\1\320\44\0\1\u02ee"+
    "\53\0\1\u02ef\35\0\1\u02f0\75\0\1\u0111\14\0\1\u02f1"+
    "\21\0\1\u0228\22\0\1\u0257\4\0\1\u02f2\12\0\1\u02f3"+
    "\45\0\1\u0118\31\0\1\u02f4\40\0\1\275\62\0\1\u02f5"+
    "\22\0\1\u02f6\63\0\1\u02f7\2\0\1\u02f8\36\0\1\u02f9"+
    "\31\0\1\u02fa\5\0\1\u02fb\51\0\1\u02fc\32\0\1\u02fd"+
    "\3\0\1\u0150\15\0\1\u02fe\20\0\1\u02ff\50\0\1\u0170"+
    "\1\0\1\u0300\44\0\1\u0301\41\0\1\u0302\2\0\1\54"+
    "\5\0\1\u0303\41\0\1\352\10\0\1\331\21\0\1\u0304"+
    "\50\0\1\u0305\42\0\1\u0306\1\u0307\62\0\1\u022b\25\0"+
    "\1\u0308\46\0\1\u0209\42\0\1\u0112\65\0\1\u0159\23\0"+
    "\1\u0309\45\0\1\u030a\57\0\1\u030b\30\0\1\u030c\62\0"+
    "\1\u0211\47\0\1\u0224\34\0\1\354\34\0\1\u030d\50\0"+
    "\1\u030e\40\0\1\u030f\56\0\1\u0310\32\0\1\u0311\44\0"+
    "\1\u0312\15\0\1\u0313\24\0\1\u0314\44\0\1\u0118\53\0"+
    "\1\u0315\53\0\1\u0316\3\0\1\u0317\23\0\1\u0318\50\0"+
    "\1\u0319\14\0\1\u0160\30\0\1\u031a\52\0\1\u0146\52\0"+
    "\1\u031b\25\0\1\u031c\40\0\1\u031d\55\0\1\354\56\0"+
    "\1\354\37\0\1\u031e\45\0\1\u031f\27\0\1\u0320\1\0"+
    "\1\u0321\4\0\1\u0154\36\0\1\275\52\0\1\320\35\0"+
    "\1\u0322\50\0\1\320\2\0\1\320\35\0\1\344\6\0"+
    "\1\344\36\0\1\u0323\44\0\1\u0324\62\0\1\275\1\u026b"+
    "\10\0\1\331\22\0\1\317\56\0\1\u0325\23\0\1\u0326"+
    "\50\0\1\320\1\313\11\0\1\u0112\41\0\1\u016a\31\0"+
    "\1\u0327\44\0\1\320\2\0\1\344\15\0\1\344\44\0"+
    "\1\u0112\20\0\1\u0328\6\0\1\u0329\7\0\1\u032a\1\0"+
    "\1\u032b\1\u0306\30\0\1\u0112\2\0\1\u032c\35\0\1\u032d"+
    "\3\0\1\275\2\0\1\u032e\37\0\1\u032f\10\0\1\u0261"+
    "\3\0\1\u0262\43\0\1\u0330\35\0\1\323\53\0\1\u0331"+
    "\30\0\1\u0332\46\0\1\354\40\0\1\u0333\71\0\1\u0334"+
    "\40\0\1\u0335\24\0\1\u0336\43\0\1\u0337\44\0\1\u028f"+
    "\1\u0338\44\0\1\u0339\3\0\1\u033a\7\0\1\u033b\30\0"+
    "\1\u033c\46\0\1\u033d\3\0\1\u033e\11\0\1\u033f\22\0"+
    "\1\u0340\51\0\1\u0341\42\0\1\u0342\65\0\1\u0343\30\0"+
    "\1\u0344\14\0\1\u0111\21\0\1\u0345\66\0\1\354\35\0"+
    "\1\u0346\32\0\1\u0347\16\0\1\u01a6\24\0\1\u0348\45\0"+
    "\1\u0349\16\0\1\u01a6\24\0\1\u034a\47\0\1\u034b\12\0"+
    "\1\371\33\0\1\u034c\36\0\1\u034d\45\0\1\u034e\42\0"+
    "\1\u034f\61\0\1\u0350\31\0\1\u0351\46\0\1\323\7\0"+
    "\1\u0352\32\0\1\u025d\51\0\1\u0248\56\0\1\u0353\33\0"+
    "\1\332\36\0\1\u02fd\3\0\1\u0150\60\0\1\u0354\47\0"+
    "\1\u01a6\33\0\1\u0355\35\0\1\u0159\40\0\1\u0356\65\0"+
    "\1\u01a2\23\0\1\u0357\46\0\1\u0358\40\0\1\u0359\51\0"+
    "\1\u0159\54\0\1\u035a\5\0\1\u035b\23\0\1\u035c\54\0"+
    "\1\u035d\44\0\1\54\43\0\1\u035e\53\0\1\u035f\42\0"+
    "\1\u0360\31\0\1\u0224\44\0\1\u0361\43\0\1\u0295\1\u0174"+
    "\50\0\1\u0362\53\0\1\u0159\35\0\1\u0363\52\0\1\u0364"+
    "\33\0\1\u0225\43\0\1\u0365\51\0\1\u0366\1\u0367\37\0"+
    "\1\u01a6\20\0\1\u02ce\25\0\1\u0368\40\0\1\275\1\0"+
    "\1\u0116\52\0\1\u0369\46\0\1\u032e\53\0\1\u036a\22\0"+
    "\1\u036b\46\0\1\u036c\44\0\1\u036d\54\0\1\323\41\0"+
    "\1\u036e\10\0\1\u036f\40\0\1\354\54\0\1\u02a7\21\0"+
    "\1\u031e\46\0\1\u0370\65\0\1\u0371\43\0\1\u0372\23\0"+
    "\1\u0373\50\0\1\155\52\0\1\u0100\31\0\1\323\44\0"+
    "\1\u0374\57\0\1\317\32\0\1\u0375\56\0\1\u0376\33\0"+
    "\1\u030b\20\0\1\275\22\0\1\u0349\1\u0377\43\0\1\u0378"+
    "\44\0\1\u0379\52\0\1\u01bb\44\0\1\210\45\0\1\u037a"+
    "\1\210\37\0\1\u0112\41\0\1\54\4\0\1\u037b\56\0"+
    "\1\323\24\0\1\354\60\0\1\354\31\0\1\u037c\43\0"+
    "\1\344\57\0\1\u037d\40\0\1\u037e\37\0\1\u017d\6\0"+
    "\1\354\7\0\1\u037f\61\0\1\u0380\5\0\1\u0118\1\0"+
    "\1\u0118\43\0\1\u0381\44\0\1\u0382\1\0\1\u0383\10\0"+
    "\1\u0381\31\0\1\327\5\0\1\u0384\57\0\1\u0383\36\0"+
    "\1\u0385\37\0\1\u0386\52\0\1\u0387\36\0\1\u0388\57\0"+
    "\1\u019c\31\0\1\u0389\36\0\1\u014c\11\0\1\u0194\10\0"+
    "\1\u038a\17\0\1\u038b\17\0\1\155\1\0\1\u038c\24\0"+
    "\1\u038d\45\0\1\u038e\7\0\1\323\41\0\1\210\35\0"+
    "\1\u038f\44\0\1\u0241\45\0\1\u0390\67\0\1\u036f\24\0"+
    "\1\u0224\42\0\1\u0391\52\0\1\u0392\3\0\1\u0349\31\0"+
    "\1\u0393\53\0\1\u0394\36\0\1\u035d\46\0\1\u0322\64\0"+
    "\1\u0395\21\0\1\u0396\45\0\1\u0397\3\0\1\u0398\52\0"+
    "\1\u0399\50\0\1\u039a\43\0\1\u039b\1\0\1\331\44\0"+
    "\1\u01e1\25\0\1\u026f\56\0\1\u039c\6\0\1\u0345\24\0"+
    "\1\u039d\41\0\1\u039e\60\0\1\344\44\0\1\u039f\35\0"+
    "\1\u036e\51\0\1\u03a0\52\0\1\320\41\0\1\u03a1\43\0"+
    "\1\323\32\0\1\u03a2\6\0\1\u03a3\42\0\1\u010b\40\0"+
    "\1\u03a4\46\0\1\344\54\0\1\u0228\27\0\1\u03a5\45\0"+
    "\1\344\4\0\1\u0150\37\0\1\344\3\0\1\320\37\0"+
    "\1\u0399\47\0\1\u03a6\42\0\1\u026b\43\0\1\u03a7\44\0"+
    "\1\u03a8\61\0\1\u03a9\32\0\1\u03aa\66\0\1\210\17\0"+
    "\1\u03ab\66\0\1\u03ac\46\0\1\u0225\23\0\1\u03ad\41\0"+
    "\1\u03ae\67\0\1\354\32\0\1\u03af\53\0\1\u03b0\46\0"+
    "\1\u027e\25\0\1\u03b1\50\0\1\u03b2\46\0\1\u03b3\40\0"+
    "\1\u03b4\40\0\1\u03b5\44\0\1\u0224\66\0\1\u0224\35\0"+
    "\1\u03b6\52\0\1\u0268\42\0\1\u0281\26\0\1\u028b\44\0"+
    "\1\u0141\44\0\1\u03b7\53\0\1\u03b8\46\0\1\u026b\31\0"+
    "\1\u03b9\2\0\1\u03ba\52\0\1\u03bb\35\0\1\u03bc\44\0"+
    "\1\323\3\0\1\u0150\36\0\1\u0311\61\0\1\u0112\44\0"+
    "\1\u03bd\30\0\1\u03be\65\0\1\u03bf\24\0\1\u01a1\46\0"+
    "\1\u0100\43\0\1\u02aa\56\0\1\275\32\0\1\u03c0\57\0"+
    "\1\u03c1\27\0\1\u03c2\45\0\1\u03c3\44\0\1\u03c4\43\0"+
    "\1\u03c5\3\0\1\u03bd\55\0\1\u03c6\30\0\1\u03c7\55\0"+
    "\1\u03c8\11\0\1\u01b3\20\0\1\u03c9\60\0\1\u03ca\33\0"+
    "\1\u0100\1\0\1\u03cb\53\0\1\u03cc\31\0\1\u03cd\43\0"+
    "\1\u03ce\43\0\1\u03cf\46\0\1\u03d0\45\0\1\u03d1\61\0"+
    "\1\u03d2\44\0\1\u03d3\30\0\1\354\64\0\1\u01a6\23\0"+
    "\1\u03d4\57\0\1\u03d5\27\0\1\u0378\67\0\1\210\44\0"+
    "\1\u03d6\37\0\1\u03d7\25\0\1\264\46\0\1\u03d8\56\0"+
    "\1\u03d9\51\0\1\u03da\37\0\1\u01be\41\0\1\u03db\33\0"+
    "\1\u0225\52\0\1\u03dc\37\0\1\u03dd\60\0\1\323\40\0"+
    "\1\u03de\35\0\1\u03df\44\0\1\u03e0\64\0\1\u03e1\27\0"+
    "\1\210\42\0\1\u03e2\44\0\1\u0128\47\0\1\u03e3\50\0"+
    "\1\344\53\0\1\u0264\45\0\1\u02b9\34\0\1\320\40\0"+
    "\1\u014a\15\0\1\u0300\40\0\1\u03e4\35\0\1\u03e5\53\0"+
    "\1\u03e6\34\0\1\u03e7\52\0\1\u01da\27\0\1\u03e8\57\0"+
    "\1\u03e9\32\0\1\u03ea\60\0\1\u03eb\50\0\1\u0134\24\0"+
    "\1\u03ec\45\0\1\u03ed\4\0\1\u03ee\44\0\1\u0114\36\0"+
    "\1\u03ef\53\0\1\u03f0\35\0\1\u023f\45\0\1\u03f1\46\0"+
    "\1\u03f2\54\0\1\u03f3\32\0\1\u03f4\46\0\1\u0269\53\0"+
    "\1\u0225\31\0\1\210\51\0\1\u03f5\47\0\1\u026f\50\0"+
    "\1\320\37\0\1\u03f6\2\0\1\u03f7\34\0\1\u03b2\41\0"+
    "\1\u03f8\70\0\1\u02a6\23\0\1\u03f9\65\0\1\320\20\0"+
    "\1\u026b\45\0\1\u03fa\51\0\1\u03fb\60\0\1\u03fc\25\0"+
    "\1\u0378\10\0\1\u0146\31\0\1\u0295\3\0\1\275\41\0"+
    "\1\u03fd\3\0\1\u014a\56\0\1\344\27\0\1\u03fe\43\0"+
    "\1\u03ff\43\0\1\u0400\53\0\1\u0401\6\0\1\u0187\30\0"+
    "\1\155\43\0\1\u0257\47\0\1\u0402\57\0\1\u0403\44\0"+
    "\1\210\23\0\1\u0111\47\0\1\u02ba\44\0\1\u0404\45\0"+
    "\1\u0100\4\0\1\u0293\52\0\1\u0405\36\0\1\u0406\41\0"+
    "\1\u02d0\1\u014a\37\0\1\275\45\0\1\u0209\53\0\1\u0407"+
    "\36\0\1\u0408\61\0\1\327\27\0\1\354\51\0\1\u0409"+
    "\45\0\1\u040a\47\0\1\u040b\41\0\1\u040c\34\0\1\u03be"+
    "\13\0\1\u040d\3\0\1\u040e\40\0\1\u040f\40\0\1\u02e0"+
    "\54\0\1\u0410\31\0\1\u0411\54\0\1\u0412\37\0\1\u0413"+
    "\35\0\1\u0414\55\0\1\u0415\46\0\1\u0416\37\0\1\u0243"+
    "\66\0\1\u01e1\26\0\1\u0417\31\0\1\u03bd\45\0\1\u02ab"+
    "\1\0\1\u0327\1\0\1\u0329\6\0\1\u03bd\27\0\1\u0418"+
    "\5\0\1\322\40\0\1\u03c8\43\0\1\u0419\43\0\1\212"+
    "\1\0\1\u016a\3\0\1\u041a\2\0\1\u0228\44\0\1\u0275"+
    "\32\0\1\u041b\53\0\1\u041c\37\0\1\u041d\46\0\1\327"+
    "\44\0\1\u041e\40\0\1\u041f\62\0\1\u0420\37\0\1\u0421"+
    "\60\0\1\u0422\23\0\1\u0423\42\0\1\u03c5\42\0\1\u0424"+
    "\54\0\1\u018a\35\0\1\u0425\10\0\1\u0426\34\0\1\u0427"+
    "\45\0\1\u0428\53\0\1\u0429\44\0\1\u042a\40\0\1\u042b"+
    "\66\0\1\u042c\22\0\1\u0321\41\0\1\u02bc\1\0\1\323"+
    "\1\0\1\u02a7\37\0\1\u042d\61\0\1\u042e\34\0\1\u03ab"+
    "\42\0\1\275\15\0\1\u0213\47\0\1\u042f\22\0\1\u0430"+
    "\43\0\1\u0431\43\0\1\343\46\0\1\u0432\42\0\1\u0110"+
    "\45\0\1\u0433\45\0\1\u0392\46\0\1\u0434\63\0\1\u0111"+
    "\42\0\1\u0435\42\0\1\u0436\26\0\1\u0437\42\0\1\54"+
    "\50\0\1\u0170\1\0\1\u0110\40\0\1\u0438\65\0\1\u0439"+
    "\40\0\1\u043a\33\0\1\u043b\41\0\1\u0174\47\0\1\u043c"+
    "\37\0\1\u043d\45\0\1\u043e\45\0\1\u025d\43\0\1\u013d"+
    "\51\0\1\275\37\0\1\u043f\44\0\1\u030b\54\0\1\u0111"+
    "\42\0\1\u0100\40\0\1\354\1\0\1\u0300\52\0\1\u0440"+
    "\32\0\1\u0441\3\0\1\u03ab\41\0\1\u0442\55\0\1\u020c"+
    "\53\0\1\u0443\23\0\1\u026b\52\0\1\327\40\0\1\323"+
    "\2\0\1\u03d1\61\0\1\u0444\23\0\1\323\56\0\1\u0445"+
    "\34\0\1\u0113\53\0\1\u0111\31\0\1\u0446\53\0\1\u0447"+
    "\37\0\1\u0448\42\0\1\u02c1\60\0\1\u02b9\47\0\1\u0322"+
    "\42\0\1\u0449\30\0\1\u0322\43\0\1\u044a\45\0\1\u044b"+
    "\57\0\1\u044c\31\0\1\u0231\57\0\1\u0231\31\0\1\u0416"+
    "\42\0\1\u044d\52\0\1\u03e0\37\0\1\u044e\43\0\1\u03dc"+
    "\44\0\1\u044f\52\0\1\u038f\55\0\1\u03c2\25\0\1\u0450"+
    "\66\0\1\210\33\0\1\275\44\0\1\u0451\44\0\1\u0452"+
    "\41\0\1\u0453\44\0\1\u0454\36\0\1\u0455\52\0\1\u0416"+
    "\40\0\1\u0456\76\0\1\u0268\15\0\1\u0345\61\0\1\u0457"+
    "\42\0\1\354\26\0\1\u0100\43\0\1\u0458\51\0\1\u0150"+
    "\11\0\1\u03e4\32\0\1\u0459\40\0\1\u045a\42\0\1\u045b"+
    "\47\0\1\u045c\47\0\1\u045d\46\0\1\u045e\41\0\1\u026b"+
    "\46\0\1\u045f\40\0\1\u0268\43\0\1\u0460\44\0\1\u0461"+
    "\41\0\1\u036f\67\0\1\u026b\27\0\1\u0462\44\0\1\u0293"+
    "\64\0\1\u0463\41\0\1\306\45\0\1\u0464\21\0\1\275"+
    "\47\0\1\u0465\57\0\1\u0466\27\0\1\u0467\63\0\1\u0468"+
    "\40\0\1\u0469\33\0\1\u046a\52\0\1\u046b\44\0\1\u046c"+
    "\43\0\1\u046d\51\0\1\u046e\37\0\1\u03e2\37\0\1\u046f"+
    "\47\0\1\u0470\41\0\1\u01a6\41\0\1\u0471\12\0\1\u0472"+
    "\47\0\1\u0340\30\0\1\u02ab\1\0\1\u0327\1\0\1\u0329"+
    "\42\0\1\u0473\1\0\1\u0474\14\0\1\u0475\22\0\1\u028f"+
    "\47\0\1\u0327\1\0\1\u0329\55\0\1\u0476\27\0\1\u0477"+
    "\53\0\1\u0478\36\0\1\u01c6\55\0\1\u0213\44\0\1\u0479"+
    "\32\0\1\u0321\44\0\1\u047a\57\0\1\u0224\32\0\1\u047b"+
    "\47\0\1\u047c\13\0\1\u047d\23\0\1\u047e\50\0\1\u0154"+
    "\42\0\1\u0224\42\0\1\u047f\42\0\1\u0194\61\0\1\u0480"+
    "\33\0\1\210\64\0\1\323\24\0\1\u0481\51\0\1\275"+
    "\35\0\1\u0270\43\0\1\u02e8\45\0\1\u036e\57\0\1\u0482"+
    "\30\0\1\u0349\55\0\1\u026b\53\0\1\u026b\33\0\1\u0483"+
    "\56\0\1\u0484\23\0\1\u0485\60\0\1\u0365\40\0\1\u0486"+
    "\41\0\1\u0487\42\0\1\u0488\62\0\1\u0489\30\0\1\u048a"+
    "\41\0\1\u048b\3\0\1\u048c\47\0\1\u048d\47\0\1\210"+
    "\32\0\1\u048e\61\0\1\u048f\33\0\1\u0490\36\0\1\u0491"+
    "\55\0\1\u0492\55\0\1\u030b\43\0\1\u0493\30\0\1\323"+
    "\10\0\1\u02d7\32\0\1\275\4\0\1\u0494\36\0\1\u0495"+
    "\43\0\1\u0257\1\0\1\275\1\0\1\u014a\36\0\1\264"+
    "\1\0\1\u02e8\71\0\1\u0496\17\0\1\u0497\3\0\1\u014a"+
    "\41\0\1\u047f\45\0\1\u0473\16\0\1\u0475\23\0\1\u0159"+
    "\61\0\1\u0498\47\0\1\u0159\1\u0499\43\0\1\u049a\33\0"+
    "\1\u049b\41\0\1\u049c\55\0\1\u049d\44\0\1\u049e\33\0"+
    "\1\u049f\40\0\1\u04a0\50\0\1\u04a1\37\0\1\u0269\44\0"+
    "\1\u01da\13\0\1\u0350\27\0\1\u04a2\47\0\1\u04a3\44\0"+
    "\1\u03ba\54\0\1\u04a4\36\0\1\207\44\0\1\331\54\0"+
    "\1\u04a5\54\0\1\u01e1\17\0\1\u04a6\66\0\1\u02c1\24\0"+
    "\1\u02ab\1\0\1\u0327\10\0\1\u03bd\27\0\1\u048f\50\0"+
    "\1\u0345\42\0\1\u04a7\42\0\1\u0453\44\0\1\u04a8\55\0"+
    "\1\u04a9\34\0\1\u04aa\57\0\1\u04ab\45\0\1\u04ac\30\0"+
    "\1\u0100\57\0\1\u04ad\41\0\1\u04ae\33\0\1\u04af\67\0"+
    "\1\u04b0\36\0\1\u0111\51\0\1\u04b1\24\0\1\u04b2\44\0"+
    "\1\u04b3\60\0\1\u04b4\42\0\1\u04b5\33\0\1\u0269\54\0"+
    "\1\u04b6\5\0\1\u04b7\25\0\1\u0349\60\0\1\u04b8\47\0"+
    "\1\u04b9\40\0\1\u04ba\32\0\1\u018a\52\0\1\u0209\44\0"+
    "\1\u04bb\36\0\1\u04bc\63\0\1\u0349\27\0\1\u04bd\47\0"+
    "\1\u04be\34\0\1\u04bf\44\0\1\u04c0\46\0\1\371\42\0"+
    "\1\u04c1\54\0\1\u0293\40\0\1\u0487\53\0\1\u04c2\45\0"+
    "\1\u04c3\55\0\1\u04c4\21\0\1\u04c5\66\0\1\u04c6\26\0"+
    "\1\u023e\35\0\1\u04c7\71\0\1\u04c8\40\0\1\u04c9\43\0"+
    "\1\u04ca\34\0\1\u01a6\50\0\1\u02af\40\0\1\333\51\0"+
    "\1\u026b\32\0\1\u04cb\57\0\1\u0345\43\0\1\u04cc\33\0"+
    "\1\u04cd\55\0\1\u04ce\32\0\1\u04cf\44\0\1\u0216\64\0"+
    "\1\u04d0\23\0\1\u04d1\61\0\1\u04d2\50\0\1\u04d3\30\0"+
    "\1\u04d4\40\0\1\u04d5\42\0\1\u04d6\46\0\1\u04d7\53\0"+
    "\1\u0287\43\0\1\u01f3\34\0\1\u04d8\64\0\1\u04d9\42\0"+
    "\1\u04da\47\0\1\u026b\37\0\1\u04db\40\0\1\370\45\0"+
    "\1\u04dc\44\0\1\u04dd\34\0\1\u04de\20\0\1\u04df\35\0"+
    "\1\u04e0\42\0\1\u04e1\35\0\1\u04e2\64\0\1\u04e3\24\0"+
    "\1\u04e4\56\0\1\u04e5\33\0\1\u0100\55\0\1\u01a6\31\0"+
    "\1\u04e6\43\0\1\u04e7\57\0\1\u04e8\42\0\1\u04e9\51\0"+
    "\1\u04ea\50\0\1\u0347\24\0\1\u04eb\42\0\1\u04ec\55\0"+
    "\1\u04ed\40\0\1\u04e9\45\0\1\u04ee\60\0\1\u0345\22\0"+
    "\1\u01bb\52\0\1\u04ef\54\0\1\u04f0\50\0\1\u04f1\36\0"+
    "\1\u04f2\52\0\1\u04f3\32\0\1\u02a7\50\0\1\u0378\40\0"+
    "\1\u04f4\60\0\1\u028e\20\0\1\u04f5\54\0\1\u04f6\50\0"+
    "\1\u0154\60\0\1\u04f7\17\0\1\275\1\0\1\u02d0\61\0"+
    "\1\u0378\30\0\1\u0409\40\0\1\u01c6\47\0\1\u04db\71\0"+
    "\1\210\15\0\1\u04f8\55\0\1\u04f9\40\0\1\u04fa\52\0"+
    "\1\u04fb\50\0\1\u047a\25\0\1\317\57\0\1\u04fc\45\0"+
    "\1\u01bb\27\0\1\u04fd\52\0\1\u03e0\37\0\1\u04fe\65\0"+
    "\1\u0112\31\0\1\333\51\0\1\u04ff\36\0\1\u0500\36\0"+
    "\1\u0501\62\0\1\u03cb\40\0\1\u0502\34\0\1\u0503\51\0"+
    "\1\u0504\42\0\1\u0505\40\0\1\u04e9\46\0\1\u0327\45\0"+
    "\1\u0506\40\0\1\u0255\42\0\1\u0507\55\0\1\u0507\34\0"+
    "\1\u0508\43\0\1\u0509\52\0\1\u050a\52\0\1\u0327\32\0"+
    "\1\u050b\43\0\1\u050c\47\0\1\u0488\41\0\1\u050d\51\0"+
    "\1\u050e\47\0\1\u0380\35\0\1\u050f\45\0\1\u0510\63\0"+
    "\1\u0438\32\0\1\u0511\60\0\1\u010b\20\0\1\u0512\66\0"+
    "\1\323\42\0\1\u0513\42\0\1\u0514\50\0\1\u0515\40\0"+
    "\1\u0516\37\0\1\370\41\0\1\307\35\0\1\u0517\1\0"+
    "\1\u0518\45\0\1\u0519\56\0\1\u051a\33\0\1\u0345\44\0"+
    "\1\u051b\57\0\1\u0155\31\0\1\u051c\57\0\1\u051d\26\0"+
    "\1\u03ac\63\0\1\u051e\50\0\1\u0100\37\0\1\u051f\27\0"+
    "\1\u03cb\46\0\1\u0520\41\0\1\u0477\46\0\1\u0521\47\0"+
    "\1\u034b\45\0\1\u0522\60\0\1\u0523\35\0\1\u0524\53\0"+
    "\1\u0213\41\0\1\u0525\30\0\1\u0526\61\0\1\u0527\25\0"+
    "\1\u0528\56\0\1\u0529\10\0\1\u052a\36\0\1\u052b\27\0"+
    "\1\u03b4\65\0\1\u02a7\40\0\1\u052c\27\0\1\u01a6\53\0"+
    "\1\u0112\65\0\1\275\35\0\1\u052d\27\0\1\u052e\47\0"+
    "\1\u052f\43\0\1\u0530\43\0\1\u0531\54\0\1\u0532\26\0"+
    "\1\u0533\50\0\1\370\50\0\1\u0534\36\0\1\u0535\64\0"+
    "\1\u0100\25\0\1\u0536\56\0\1\u0537\30\0\1\u028e\54\0"+
    "\1\u0538\43\0\1\u03b2\44\0\1\u039d\56\0\1\u04ca\24\0"+
    "\1\u02a7\51\0\1\u0539\40\0\1\130\57\0\1\u053a\32\0"+
    "\1\u0438\61\0\1\u043d\41\0\1\u053b\25\0\1\u053c\6\0"+
    "\1\u0531\37\0\1\u053d\54\0\1\u053e\44\0\1\u053f\47\0"+
    "\1\u0428\50\0\1\u0153\31\0\1\u0503\44\0\1\u03ac\37\0"+
    "\1\u0540\66\0\1\u0541\23\0\1\u0542\45\0\1\u04de\54\0"+
    "\1\u0100\41\0\1\323\57\0\1\u0110\33\0\1\u0543\55\0"+
    "\1\u0544\24\0\1\u04e3\44\0\1\u0545\50\0\1\u0546\55\0"+
    "\1\u0547\25\0\1\u0548\67\0\1\u0549\21\0\1\u054a\46\0"+
    "\1\u0487\45\0\1\u054b\47\0\1\u054c\47\0\1\u054d\47\0"+
    "\1\u054e\54\0\1\u054f\30\0\1\u0550\36\0\1\u0551\45\0"+
    "\1\370\53\0\1\u0552\43\0\1\u0553\41\0\1\u0489\47\0"+
    "\1\u03cd\47\0\1\u0554\47\0\1\u0555\42\0\1\u0556\30\0"+
    "\1\u0557\67\0\1\u0515\42\0\1\130\22\0\1\u0558\55\0"+
    "\1\u0559\36\0\1\u026b\43\0\1\u0506\56\0\1\u055a\41\0"+
    "\1\u055b\34\0\1\u055c\65\0\1\u0428\22\0\1\u055d\65\0"+
    "\1\u055e\25\0\1\u055f\53\0\1\u03d0\47\0\1\u0560\46\0"+
    "\1\u0561\45\0\1\u0562\35\0\1\u04fe\56\0\1\u0563\30\0"+
    "\1\u0564\47\0\1\u03e0\35\0\1\u0565\50\0\1\u0566\40\0"+
    "\1\u0567\43\0\1\u0568\57\0\1\u04b3\46\0\1\u0569\27\0"+
    "\1\323\5\0\1\u01a6\51\0\1\u0153\47\0\1\u0254\31\0"+
    "\1\u04de\42\0\1\u0101\47\0\1\u0479\40\0\1\u056a\53\0"+
    "\1\u056b\37\0\1\u056c\63\0\1\u04e9\36\0\1\u056d\53\0"+
    "\1\u0349\31\0\1\u056e\50\0\1\u04e8\41\0\1\u056f\55\0"+
    "\1\u0570\25\0\1\u0571\41\0\1\u0572\70\0\1\u0573\40\0"+
    "\1\323\31\0\1\u0574\60\0\1\u0515\23\0\1\u0575\44\0"+
    "\1\u0576\67\0\1\275\32\0\1\u0577\41\0\1\u0578\42\0"+
    "\1\u04e3\43\0\1\u0579\63\0\1\u057a\36\0\1\u0137\34\0"+
    "\1\u04e9\42\0\1\u0515\37\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[48988];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\31\1\3\11\1\0\1\1\1\0\1\1"+
    "\5\0\1\1\6\0\1\1\3\0\2\1\6\0\1\1"+
    "\26\0\1\1\1\0\1\1\2\0\1\11\1\1\1\0"+
    "\1\11\17\0\1\1\2\0\1\1\20\0\1\1\1\0"+
    "\1\1\7\0\1\1\5\0\1\1\3\0\1\1\11\0"+
    "\1\1\6\0\1\1\24\0\1\1\2\0\1\1\1\11"+
    "\7\0\1\1\10\0\1\1\1\0\1\1\2\0\1\11"+
    "\11\0\1\1\6\0\1\11\3\0\1\11\3\0\1\1"+
    "\12\0\1\1\1\11\7\0\1\11\15\0\1\1\6\0"+
    "\1\1\4\0\1\1\4\0\1\1\33\0\3\1\10\0"+
    "\1\1\4\0\1\1\1\0\1\1\10\0\1\11\2\0"+
    "\1\11\12\0\2\1\12\0\1\1\50\0\1\1\1\0"+
    "\1\1\4\0\1\1\3\0\1\1\10\0\1\1\27\0"+
    "\1\1\1\11\2\0\1\1\4\0\1\1\5\0\1\1"+
    "\26\0\1\1\1\0\1\1\14\0\1\1\5\0\1\1"+
    "\13\0\1\1\7\0\1\1\4\0\1\11\12\0\1\11"+
    "\1\0\1\1\12\0\1\11\1\0\1\1\26\0\2\1"+
    "\30\0\1\1\6\0\1\11\25\0\1\1\11\0\1\1"+
    "\13\0\2\1\2\0\1\11\3\0\2\1\30\0\1\1"+
    "\24\0\1\1\1\0\1\11\2\0\1\11\2\0\1\1"+
    "\7\0\1\1\16\0\1\1\17\0\1\11\11\0\1\1"+
    "\2\0\1\1\2\0\1\1\11\0\1\11\4\0\1\1"+
    "\5\0\1\11\4\0\1\11\7\0\1\1\2\0\1\1"+
    "\2\0\1\1\1\0\2\1\3\0\1\1\4\0\1\1"+
    "\3\0\1\11\1\1\53\0\1\1\2\0\1\1\6\0"+
    "\1\11\1\0\1\1\2\0\1\1\3\0\1\1\15\0"+
    "\1\1\6\0\1\11\4\0\2\1\17\0\2\1\2\0"+
    "\1\1\1\0\1\1\6\0\1\11\5\0\2\1\2\0"+
    "\1\11\6\0\1\1\25\0\1\11\1\0\1\11\25\0"+
    "\2\1\2\0\1\1\7\0\1\1\32\0\1\1\21\0"+
    "\2\1\1\0\1\11\15\0\1\1\3\0\1\11\6\0"+
    "\1\1\47\0\1\1\4\0\1\1\10\0\1\11\17\0"+
    "\1\1\13\0\1\1\31\0\1\1\15\0\1\1\17\0"+
    "\1\11\2\0\1\11\1\1\3\0\1\11\4\0\2\11"+
    "\24\0\1\11\7\0\1\11\6\0\1\11\5\0\1\1"+
    "\44\0\1\11\102\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1402];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 102) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 22: 
          { lexeme=yytext(); return VerbosRegPresent;
          }
        case 53: break;
        case 36: 
          { lexeme=yytext(); return PronDemostrativos;
          }
        case 54: break;
        case 17: 
          { lexeme=yytext(); return AdPosesivos;
          }
        case 55: break;
        case 19: 
          { lexeme=yytext(); return PronPerPlurales;
          }
        case 56: break;
        case 39: 
          { lexeme=yytext(); return AuxWill;
          }
        case 57: break;
        case 7: 
          { lexeme=yytext(); return Linea;
          }
        case 58: break;
        case 23: 
          { lexeme=yytext(); return VerbIrregPast;
          }
        case 59: break;
        case 33: 
          { lexeme=yytext(); return AdDemostrativos;
          }
        case 60: break;
        case 37: 
          { lexeme=yytext(); return AdvModo;
          }
        case 61: break;
        case 41: 
          { lexeme=yytext(); return AdNumOrdinal;
          }
        case 62: break;
        case 20: 
          { lexeme=yytext(); return AdIndefinidos;
          }
        case 63: break;
        case 32: 
          { lexeme=yytext(); return VerbWas;
          }
        case 64: break;
        case 40: 
          { lexeme=yytext(); return VerbBeing;
          }
        case 65: break;
        case 49: 
          { lexeme=yytext(); return CS_Concesivas;
          }
        case 66: break;
        case 47: 
          { lexeme=yytext(); return CS_Consecutivas;
          }
        case 67: break;
        case 8: 
          { lexeme=yytext(); return VerbBe;
          }
        case 68: break;
        case 4: 
          { lexeme=yytext(); return PronPerSingulares;
          }
        case 69: break;
        case 16: 
          { lexeme=yytext(); return AdvNegacion;
          }
        case 70: break;
        case 18: 
          { lexeme=yytext(); return AdvCantidad;
          }
        case 71: break;
        case 30: 
          { lexeme=yytext(); return AdvAfirmacion;
          }
        case 72: break;
        case 50: 
          { lexeme=yytext(); return CC_Adversativas;
          }
        case 73: break;
        case 35: 
          { lexeme=yytext(); return AuxDo;
          }
        case 74: break;
        case 12: 
          { lexeme=yytext(); return CS_Condicionales;
          }
        case 75: break;
        case 3: 
          { lexeme=yytext(); return ArtIndefinidos;
          }
        case 76: break;
        case 13: 
          { lexeme=yytext(); return AdvLugar;
          }
        case 77: break;
        case 38: 
          { lexeme=yytext(); return VerbWere;
          }
        case 78: break;
        case 27: 
          { lexeme=yytext(); return AdvTiempo;
          }
        case 79: break;
        case 43: 
          { lexeme=yytext(); return VerbIrregIng;
          }
        case 80: break;
        case 44: 
          { lexeme=yytext(); return AdvDuda;
          }
        case 81: break;
        case 11: 
          { lexeme=yytext(); return VerbosIrregPresent;
          }
        case 82: break;
        case 21: 
          { lexeme=yytext(); return Sustantivos;
          }
        case 83: break;
        case 29: 
          { lexeme=yytext(); return ArtDefinidos;
          }
        case 84: break;
        case 6: 
          { lexeme=yytext(); return SigPunt;
          }
        case 85: break;
        case 51: 
          { lexeme=yytext(); return CS_Finales;
          }
        case 86: break;
        case 46: 
          { lexeme=yytext(); return CC_Distributivas;
          }
        case 87: break;
        case 9: 
          { lexeme=yytext(); return preposiciones;
          }
        case 88: break;
        case 25: 
          { lexeme=yytext(); return VerbAre;
          }
        case 89: break;
        case 48: 
          { lexeme=yytext(); return CC_Explicativas;
          }
        case 90: break;
        case 1: 
          { return ERROR;
          }
        case 91: break;
        case 15: 
          { lexeme=yytext(); return CC_Disyuntivas;
          }
        case 92: break;
        case 28: 
          { lexeme=yytext(); return AdNumCardinal;
          }
        case 93: break;
        case 42: 
          { lexeme=yytext(); return VerbosRegIng;
          }
        case 94: break;
        case 26: 
          { lexeme=yytext(); return CC_Copulativas;
          }
        case 95: break;
        case 10: 
          { lexeme=yytext(); return VerbAm;
          }
        case 96: break;
        case 31: 
          { lexeme=yytext(); return PronInterrogativos;
          }
        case 97: break;
        case 52: 
          { lexeme=yytext(); return AuxGoing;
          }
        case 98: break;
        case 2: 
          { /*Ignore*/
          }
        case 99: break;
        case 24: 
          { lexeme=yytext(); return AdCalificativos;
          }
        case 100: break;
        case 5: 
          { lexeme=yytext(); return PronI;
          }
        case 101: break;
        case 45: 
          { lexeme=yytext(); return CS_Casuales;
          }
        case 102: break;
        case 34: 
          { lexeme=yytext(); return VerbRegPast;
          }
        case 103: break;
        case 14: 
          { lexeme=yytext(); return VerbIs;
          }
        case 104: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
